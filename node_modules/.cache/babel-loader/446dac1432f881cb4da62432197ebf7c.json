{"ast":null,"code":"import _taggedTemplateLiteral from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _classCallCheck from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createSuper\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: nowrap;\\n  align-items: stretch;\\n  height: 100vh;\\n  max-width: 440px;\\n  position: relative;\\n  overflow-x: hidden;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{Component}from'react';import styled from'styled-components';import MsgContactList from'./MsgContactList';import MsgContactAdd from'./MsgContactAdd';import MsgList from'./MsgList';import MsgComposer from'./MsgComposer';import Spinner from'./Spinner';import MsgContactHeader from'./MsgContactHeader';var msgsPerPage=30;var CanvasMsg=/*#__PURE__*/function(_Component){_inherits(CanvasMsg,_Component);var _super=_createSuper(CanvasMsg);function CanvasMsg(props){var _this;_classCallCheck(this,CanvasMsg);_this=_super.call(this,props);_this.selectContact=function(selectedContact){_this.setState({selectedContact:selectedContact});if(selectedContact!==null){_this.fetchMsgsForContact(selectedContact);// async fetch data for selected contact\n_this.props.client.getChannelByUniqueName(selectedContact).then(function(channel){// mark all messages as read\nchannel.setAllMessagesConsumed().then(function(){// when done, update cache as well\n_this.props.setUnreadsCache(selectedContact,0);});});}};_this.deleteThread=function(contact){_this.props.client.getChannelByUniqueName(contact).then(function(channel){// mark all messages as read\nchannel.delete();_this.fetchTracker[contact]=false;delete _this.msgAddedHandlerTracker[contact];});};_this.fetchAnotherPage=function(){return new Promise(function(resolve,reject){var contact=_this.state.selectedContact;if(contact==='new'){return;}var paginator=_this.props.msgPgtrCache[contact];if(!paginator.hasPrevPage){reject('No more messages.');}else{paginator.prevPage().then(function(paginator){var messages=[];paginator.items.forEach(function(msg){messages.push(msg);});_this.props.addMsgCachePage(contact,messages,paginator);resolve();});}});};_this.msgAddedHandler=function(contact,msg){_this.props.addMsgCacheMsg(contact,msg);if(// if we're the originator of the message, it means we've read it\n// (this ensures messages originating from this client don't count as unread)\nmsg.state.author==='us'||// or same thing if user has the thread the message belongs to currently opened\ncontact===_this.state.selectedContact){_this.props.channelList[contact].updateLastConsumedMessageIndex(msg.state.index).then(function(){_this.props.setUnreadMsgs(_this.props.channelList[contact],contact);});}else{_this.props.setUnreadMsgs(_this.props.channelList[contact],contact);}};_this.fetchMsgsForContact=function(contact){if(contact==='new'){return;}if(_this.props.msgCache[contact]===undefined&&!_this.fetchTracker[contact]){_this.fetchTracker[contact]=true;// prevent double-fetching\n_this.props.client.getChannelByUniqueName(contact).then(function(channel){// first fetch existing messages\nchannel.getMessages(msgsPerPage).then(function(paginator){var messages=[];paginator.items.forEach(function(msg){messages.push(msg);});_this.props.setMsgCachePage(contact,messages,paginator);_this.props.setUnreadMsgs(channel,contact);});// then subscribe for receiving new messages\nif(!_this.msgAddedHandlerTracker[contact]){_this.msgAddedHandlerTracker[contact]=true;channel.on('messageAdded',_this.msgAddedHandler.bind(null,contact));}});}};_this.updateNewPhoneNumber=function(e){if(e&&e.target){_this.setState({newPhoneNumber:e.target.value});}else if(e===''){// for resets after sending message in MsgComposer\n_this.setState({newPhoneNumber:''});}};_this.msgAddedHandlerTracker={};_this.fetchTracker={};_this.state={selectedContact:null,newPhoneNumber:''};return _this;}_createClass(CanvasMsg,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(this.props.channelList){Object.keys(this.props.channelList).forEach(function(contact){_this2.fetchMsgsForContact(contact);});}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var _this3=this;if(this.props.channelList){Object.keys(this.props.channelList).forEach(function(contact){_this3.fetchMsgsForContact(contact);});}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this4=this;// remove all 'messageAdded' event listeners\nObject.keys(this.msgAddedHandlerTracker).forEach(function(contact){_this4.props.client.getChannelByUniqueName(contact).then(function(channel){channel.removeAllListeners('messageAdded');});});}},{key:\"render\",value:function render(){if(this.state.selectedContact){return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(MsgContactHeader,{key:\"msgContactHeader\",back:this.selectContact.bind(null,null),selectedContact:this.state.selectedContact,newPhoneNumber:this.state.newPhoneNumber,updateNewPhoneNumber:this.updateNewPhoneNumber}),/*#__PURE__*/React.createElement(MsgList,{key:\"msgList\",messages:this.props.msgCache[this.state.selectedContact],fetchAnotherPage:this.fetchAnotherPage,selectedContact:this.state.selectedContact}),/*#__PURE__*/React.createElement(MsgComposer,{key:\"msgComposer\",secret:this.props.secret,selectedContact:this.state.selectedContact,selectContact:this.selectContact,newPhoneNumber:this.state.newPhoneNumber,updateNewPhoneNumber:this.updateNewPhoneNumber}));}else{if(this.props.channelList===null){return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(Spinner,{text:\"Loading contacts...\"}));}else{return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(MsgContactAdd,{key:\"msgContactAdd\",selectContact:this.selectContact}),/*#__PURE__*/React.createElement(MsgContactList,{key:\"msgContactList\",msgUnreadsCache:this.props.msgUnreadsCache,client:this.props.client,channelList:this.props.channelList,selectContact:this.selectContact,deleteThread:this.deleteThread,msgCache:this.props.msgCache,unreadsCache:this.props.unreadsCache}));}}}}]);return CanvasMsg;}(Component);export{CanvasMsg as default};var Canvas=styled.div(_templateObject());","map":{"version":3,"sources":["/root/twilio-phone-client/src/components/MsgCanvas.js"],"names":["React","Component","styled","MsgContactList","MsgContactAdd","MsgList","MsgComposer","Spinner","MsgContactHeader","msgsPerPage","CanvasMsg","props","selectContact","selectedContact","setState","fetchMsgsForContact","client","getChannelByUniqueName","then","channel","setAllMessagesConsumed","setUnreadsCache","deleteThread","contact","delete","fetchTracker","msgAddedHandlerTracker","fetchAnotherPage","Promise","resolve","reject","state","paginator","msgPgtrCache","hasPrevPage","prevPage","messages","items","forEach","msg","push","addMsgCachePage","msgAddedHandler","addMsgCacheMsg","author","channelList","updateLastConsumedMessageIndex","index","setUnreadMsgs","msgCache","undefined","getMessages","setMsgCachePage","on","bind","updateNewPhoneNumber","e","target","newPhoneNumber","value","Object","keys","removeAllListeners","secret","msgUnreadsCache","unreadsCache","Canvas","div"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport MsgContactList from './MsgContactList';\nimport MsgContactAdd from './MsgContactAdd';\nimport MsgList from './MsgList';\nimport MsgComposer from './MsgComposer';\nimport Spinner from './Spinner';\nimport MsgContactHeader from './MsgContactHeader';\n\nconst msgsPerPage = 30;\n\nexport default class CanvasMsg extends Component {\n  constructor(props) {\n    super(props);\n    this.msgAddedHandlerTracker = {};\n    this.fetchTracker = {};\n    this.state = {\n      selectedContact: null,\n      newPhoneNumber: ''\n    };\n  }\n\n  selectContact = (selectedContact) => {\n    this.setState({ selectedContact });\n    if (selectedContact !== null) {\n      this.fetchMsgsForContact(selectedContact); // async fetch data for selected contact\n      this.props.client\n        .getChannelByUniqueName(selectedContact)\n        .then((channel) => {\n          // mark all messages as read\n          channel.setAllMessagesConsumed().then(() => {\n            // when done, update cache as well\n            this.props.setUnreadsCache(selectedContact, 0);\n          });\n        });\n    }\n  };\n\n  deleteThread = (contact) => {\n    this.props.client.getChannelByUniqueName(contact).then((channel) => {\n      // mark all messages as read\n      channel.delete();\n      this.fetchTracker[contact] = false;\n      delete this.msgAddedHandlerTracker[contact];\n    });\n  };\n\n  fetchAnotherPage = () => {\n    return new Promise((resolve, reject) => {\n      const contact = this.state.selectedContact;\n      if (contact === 'new') {\n        return;\n      }\n      const paginator = this.props.msgPgtrCache[contact];\n      if (!paginator.hasPrevPage) {\n        reject('No more messages.');\n      } else {\n        paginator.prevPage().then((paginator) => {\n          let messages = [];\n          paginator.items.forEach((msg) => {\n            messages.push(msg);\n          });\n          this.props.addMsgCachePage(contact, messages, paginator);\n          resolve();\n        });\n      }\n    });\n  };\n\n  componentDidMount() {\n    if (this.props.channelList) {\n      Object.keys(this.props.channelList).forEach((contact) => {\n        this.fetchMsgsForContact(contact);\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.channelList) {\n      Object.keys(this.props.channelList).forEach((contact) => {\n        this.fetchMsgsForContact(contact);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // remove all 'messageAdded' event listeners\n    Object.keys(this.msgAddedHandlerTracker).forEach((contact) => {\n      this.props.client.getChannelByUniqueName(contact).then((channel) => {\n        channel.removeAllListeners('messageAdded');\n      });\n    });\n  }\n\n  msgAddedHandler = (contact, msg) => {\n    this.props.addMsgCacheMsg(contact, msg);\n    if (\n      // if we're the originator of the message, it means we've read it\n      // (this ensures messages originating from this client don't count as unread)\n      msg.state.author === 'us' ||\n      // or same thing if user has the thread the message belongs to currently opened\n      contact === this.state.selectedContact\n    ) {\n      this.props.channelList[contact]\n        .updateLastConsumedMessageIndex(msg.state.index)\n        .then(() => {\n          this.props.setUnreadMsgs(this.props.channelList[contact], contact);\n        });\n    } else {\n      this.props.setUnreadMsgs(this.props.channelList[contact], contact);\n    }\n  };\n\n  fetchMsgsForContact = (contact) => {\n    if (contact === 'new') {\n      return;\n    }\n    if (\n      this.props.msgCache[contact] === undefined &&\n      !this.fetchTracker[contact]\n    ) {\n      this.fetchTracker[contact] = true; // prevent double-fetching\n      this.props.client.getChannelByUniqueName(contact).then((channel) => {\n        // first fetch existing messages\n        channel.getMessages(msgsPerPage).then((paginator) => {\n          let messages = [];\n          paginator.items.forEach((msg) => {\n            messages.push(msg);\n          });\n          this.props.setMsgCachePage(contact, messages, paginator);\n          this.props.setUnreadMsgs(channel, contact);\n        });\n        // then subscribe for receiving new messages\n        if (!this.msgAddedHandlerTracker[contact]) {\n          this.msgAddedHandlerTracker[contact] = true;\n          channel.on('messageAdded', this.msgAddedHandler.bind(null, contact));\n        }\n      });\n    }\n  };\n\n  updateNewPhoneNumber = (e) => {\n    if (e && e.target) {\n      this.setState({ newPhoneNumber: e.target.value });\n    } else if (e === '') {\n      // for resets after sending message in MsgComposer\n      this.setState({ newPhoneNumber: '' });\n    }\n  };\n\n  render() {\n    if (this.state.selectedContact) {\n      return (\n        <Canvas>\n          <MsgContactHeader\n            key=\"msgContactHeader\"\n            back={this.selectContact.bind(null, null)}\n            selectedContact={this.state.selectedContact}\n            newPhoneNumber={this.state.newPhoneNumber}\n            updateNewPhoneNumber={this.updateNewPhoneNumber}\n          />\n          <MsgList\n            key=\"msgList\"\n            messages={this.props.msgCache[this.state.selectedContact]}\n            fetchAnotherPage={this.fetchAnotherPage}\n            selectedContact={this.state.selectedContact}\n          />\n          <MsgComposer\n            key=\"msgComposer\"\n            secret={this.props.secret}\n            selectedContact={this.state.selectedContact}\n            selectContact={this.selectContact}\n            newPhoneNumber={this.state.newPhoneNumber}\n            updateNewPhoneNumber={this.updateNewPhoneNumber}\n          />\n        </Canvas>\n      );\n    } else {\n      if (this.props.channelList === null) {\n        return (\n          <Canvas>\n            <Spinner text=\"Loading contacts...\" />\n          </Canvas>\n        );\n      } else {\n        return (\n          <Canvas>\n            <MsgContactAdd\n              key=\"msgContactAdd\"\n              selectContact={this.selectContact}\n            />\n            <MsgContactList\n              key=\"msgContactList\"\n              msgUnreadsCache={this.props.msgUnreadsCache}\n              client={this.props.client}\n              channelList={this.props.channelList}\n              selectContact={this.selectContact}\n              deleteThread={this.deleteThread}\n              msgCache={this.props.msgCache}\n              unreadsCache={this.props.unreadsCache}\n            />\n          </Canvas>\n        );\n      }\n    }\n  }\n}\n\nconst Canvas = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: stretch;\n  height: 100vh;\n  max-width: 440px;\n  position: relative;\n  overflow-x: hidden;\n`;\n"]},"metadata":{},"sourceType":"module"}