{"ast":null,"code":"'use strict';\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\n\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor); // Make sure MOS is in range\n\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\n\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n\n  var multiplier = .01;\n\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\n\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nmodule.exports = {\n  calculate: calcMos\n};","map":{"version":3,"sources":["/root/twilio-phone-client/node_modules/twilio-client/es5/twilio/rtc/mos.js"],"names":["rfactorConstants","r0","is","calcMos","rtt","jitter","fractionLost","isPositiveNumber","rFactor","calculateRFactor","mos","isValid","effectiveLatency","multiplier","n","isNaN","isFinite","module","exports","calculate"],"mappings":"AAAA;;AAEA,IAAIA,gBAAgB,GAAG;AACrBC,EAAAA,EAAE,EAAE,MADiB;AAErBC,EAAAA,EAAE,EAAE;AAFiB,CAAvB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,YAA9B,EAA4C;AAC1C,MAAI,CAACC,gBAAgB,CAACH,GAAD,CAAjB,IAA0B,CAACG,gBAAgB,CAACF,MAAD,CAA3C,IAAuD,CAACE,gBAAgB,CAACD,YAAD,CAA5E,EAA4F;AAC1F,WAAO,IAAP;AACD;;AAED,MAAIE,OAAO,GAAGC,gBAAgB,CAACL,GAAD,EAAMC,MAAN,EAAcC,YAAd,CAA9B;AAEA,MAAII,GAAG,GAAG,IAAI,QAAQF,OAAZ,GAAsB,WAAWA,OAAX,IAAsBA,OAAO,GAAG,EAAhC,KAAuC,MAAMA,OAA7C,CAAhC,CAP0C,CAS1C;;AACA,MAAIG,OAAO,GAAGD,GAAG,IAAI,GAAP,IAAcA,GAAG,GAAG,GAAlC;AACA,SAAOC,OAAO,GAAGD,GAAH,GAAS,IAAvB;AACD;;AAED,SAASD,gBAAT,CAA0BL,GAA1B,EAA+BC,MAA/B,EAAuCC,YAAvC,EAAqD;AACnD,MAAIM,gBAAgB,GAAGR,GAAG,GAAGC,MAAM,GAAG,CAAf,GAAmB,EAA1C;AACA,MAAIG,OAAO,GAAG,CAAd;;AAEA,UAAQ,IAAR;AACE,SAAKI,gBAAgB,GAAG,GAAxB;AACEJ,MAAAA,OAAO,GAAGR,gBAAgB,CAACC,EAAjB,GAAsBW,gBAAgB,GAAG,EAAnD;AACA;;AACF,SAAKA,gBAAgB,GAAG,IAAxB;AACEJ,MAAAA,OAAO,GAAGR,gBAAgB,CAACC,EAAjB,GAAsB,CAACW,gBAAgB,GAAG,GAApB,IAA2B,EAA3D;AACA;;AACF,SAAKA,gBAAgB,IAAI,IAAzB;AACEJ,MAAAA,OAAO,GAAGR,gBAAgB,CAACC,EAAjB,GAAsBW,gBAAgB,GAAG,GAAnD;AACA;AATJ;;AAYA,MAAIC,UAAU,GAAG,GAAjB;;AACA,UAAQ,IAAR;AACE,SAAKP,YAAY,KAAK,CAAC,CAAvB;AACEO,MAAAA,UAAU,GAAG,CAAb;AACAL,MAAAA,OAAO,GAAG,CAAV;AACA;;AACF,SAAKF,YAAY,IAAIE,OAAO,GAAG,GAA/B;AACEK,MAAAA,UAAU,GAAG,GAAb;AACA;;AACF,SAAKP,YAAY,GAAGE,OAAO,GAAG,GAAzB,IAAgCF,YAAY,GAAG,GAApD;AACEO,MAAAA,UAAU,GAAG,GAAb;AACA;AAVJ;;AAaAL,EAAAA,OAAO,IAAIF,YAAY,GAAGO,UAA1B;AACA,SAAOL,OAAP;AACD;;AAED,SAASD,gBAAT,CAA0BO,CAA1B,EAA6B;AAC3B,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAACC,KAAK,CAACD,CAAD,CAA/B,IAAsCE,QAAQ,CAACF,CAAD,CAA9C,IAAqDA,CAAC,IAAI,CAAjE;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,SAAS,EAAEhB;AADI,CAAjB","sourcesContent":["'use strict';\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n\n  // Make sure MOS is in range\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\n\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n\n  var multiplier = .01;\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\n\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nmodule.exports = {\n  calculate: calcMos\n};"]},"metadata":{},"sourceType":"script"}