{"ast":null,"code":"/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n// The legacy max volume, which is the positive half of a signed short integer.\nvar OLD_MAX_VOLUME = 32767;\nvar NativeRTCStatsReport = typeof window !== 'undefined' ? window.RTCStatsReport : undefined;\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\n\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  var self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get: function get() {\n        return self._map.size;\n      }\n    },\n    _map: {\n      value: statsMap\n    }\n  });\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n} // If RTCStatsReport is available natively, inherit it. Keep our constructor.\n\n\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n} // Map the Map-like read methods to the underlying Map\n\n\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(function (key) {\n  MockRTCStatsReport.prototype[key] = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return (_a = this._map)[key].apply(_a, args);\n  };\n});\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\n\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce(function (map, rtcStats) {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\n\n\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  var activeCandidatePairId;\n  var transportIds = new Map();\n  var statsMap = statsResponse.result().reduce(function (map, report) {\n    var id = report.id;\n\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(\"rtp-\" + id, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(\"rtp-\" + id, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(\"track-\" + id, createRTCMediaStreamTrackStats(report));\n        map.set(\"codec-\" + id, createRTCCodecStats(report));\n        break;\n\n      case 'googComponent':\n        var transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    var activeTransportId = transportIds.get(activeCandidatePairId);\n\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\n\n\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\n\n\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: report.stat('mediaType') + \"/\" + report.stat('googCodecName'),\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\n\n\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived') ? getInt(report, 'googFrameWidthReceived') : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived') ? getInt(report, 'googFrameHeightReceived') : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel') ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\n\n\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: \"track-\" + report.id,\n    transportId: report.stat('transportId'),\n    codecId: \"codec-\" + report.id,\n    firCount: isInbound ? getInt(report, 'googFirsSent') : undefined,\n    pliCount: isInbound ? getInt(report, 'googPlisSent') : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound ? getInt(report, 'googNacksSent') : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\n\n\nfunction createRTCInboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, true);\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\n\n\nfunction createRTCOutboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, false);\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\n\n\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote ? 'remote-candidate' : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote: isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\n\n\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\n\n\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\n\n\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\n\n\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === '' ? undefined : parseInt(inMs, 10) / 1000;\n}\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\n\n\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n\n    case 'serverreflexive':\n      return 'srflx';\n\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseInt(stat, 10) : undefined;\n}\n\nfunction getFloat(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseFloat(stat) : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? stat === 'true' || stat === true : undefined;\n}\n\nfunction isPresent(report, statName) {\n  var stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport;","map":{"version":3,"sources":["../../../lib/twilio/rtc/mockrtcstatsreport.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n\n// The legacy max volume, which is the positive half of a signed short integer.\nconst OLD_MAX_VOLUME = 32767;\n\nconst NativeRTCStatsReport = typeof window !== 'undefined'\n  ? window.RTCStatsReport : undefined;\n\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  const self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get() {\n        return self._map.size;\n      }\n    },\n    _map: { value: statsMap }\n  });\n\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(key => {\n  MockRTCStatsReport.prototype[key] = function(...args) {\n    return this._map[key](...args);\n  };\n});\n\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce((map, rtcStats) => {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  let activeCandidatePairId;\n  const transportIds = new Map();\n\n  const statsMap = statsResponse.result().reduce((map, report) => {\n    const id = report.id;\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(`rtp-${id}`, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(`rtp-${id}`, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(`track-${id}`, createRTCMediaStreamTrackStats(report));\n        map.set(`codec-${id}`, createRTCCodecStats(report));\n        break;\n      case 'googComponent':\n        const transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    const activeTransportId = transportIds.get(activeCandidatePairId);\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: `${report.stat('mediaType')}/${report.stat('googCodecName')}`,\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived')\n      ? getInt(report, 'googFrameWidthReceived')\n      : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived')\n      ? getInt(report, 'googFrameHeightReceived')\n      : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel')\n      ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME\n      : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: `track-${report.id}`,\n    transportId: report.stat('transportId'),\n    codecId: `codec-${report.id}`,\n    firCount: isInbound\n      ? getInt(report, 'googFirsSent')\n      : undefined,\n    pliCount: isInbound\n      ? getInt(report, 'googPlisSent')\n      : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound\n      ? getInt(report, 'googNacksSent')\n      : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, true);\n\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, false);\n\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote\n      ? 'remote-candidate'\n      : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === ''\n    ? undefined\n    : parseInt(inMs, 10) / 1000;\n}\n\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n    case 'serverreflexive':\n      return 'srflx';\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseInt(stat, 10)\n    : undefined;\n}\n\nfunction getFloat(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseFloat(stat)\n    : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? (stat === 'true' || stat === true)\n    : undefined;\n}\n\nfunction isPresent(report, statName) {\n  const stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}