{"ast":null,"code":"import React from'react';function printTimestamp(date){return(date.getHours()<10?\"0\":\"\")+date.getHours()+\":\"+(date.getMinutes()<10?\"0\":\"\")+date.getMinutes();};function formatBodyText(txt){return txt.split('\\n').map(function(item,key){return/*#__PURE__*/React.createElement(\"span\",{key:key},item,/*#__PURE__*/React.createElement(\"br\",null));});};function formatBodyPreviewText(txt){return txt.replace(/\\n[\\s\\S]*/,\"...\");// because pattern /.*/ is not applied over multiple lines and we want to remove all subsequent lines\n};function pad2(digit){return digit<10?\"0\".concat(digit):\"\".concat(digit);}function getDate(date){return date.getFullYear()+pad2(date.getMonth()+1)+pad2(date.getDate());}var isToday=function isToday(someDate){var today=new Date();return getDate(someDate)===getDate(today);};var isYday=function isYday(someDate){var yday=new Date();yday.setDate(yday.getDate()-1);return getDate(someDate)===getDate(yday);};var dateOptions={day:'numeric',month:'short'};function prettyDate(someDate){if(isToday(someDate)){return\"Today\";}else if(isYday(someDate)){return\"Yesterday\";}else{return someDate.toLocaleString('en-US',dateOptions);}}export{printTimestamp,formatBodyText,formatBodyPreviewText,prettyDate};","map":{"version":3,"sources":["/root/twilio-phone-client/src/helpers.js"],"names":["React","printTimestamp","date","getHours","getMinutes","formatBodyText","txt","split","map","item","key","formatBodyPreviewText","replace","pad2","digit","getDate","getFullYear","getMonth","isToday","someDate","today","Date","isYday","yday","setDate","dateOptions","day","month","prettyDate","toLocaleString"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,QAASC,CAAAA,cAAT,CAAwBC,IAAxB,CAA8B,CAC5B,MAAO,CAACA,IAAI,CAACC,QAAL,GAAkB,EAAlB,CAAuB,GAAvB,CAA6B,EAA9B,EAAoCD,IAAI,CAACC,QAAL,EAApC,CAAsD,GAAtD,EAA6DD,IAAI,CAACE,UAAL,GAAoB,EAApB,CAAyB,GAAzB,CAA+B,EAA5F,EAAkGF,IAAI,CAACE,UAAL,EAAzG,CACD,EAED,QAASC,CAAAA,cAAT,CAAwBC,GAAxB,CAA6B,CAC3B,MAAOA,CAAAA,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,SAAUC,IAAV,CAAgBC,GAAhB,CAAqB,CAC9C,mBACE,4BAAM,GAAG,CAAEA,GAAX,EACGD,IADH,cAEE,8BAFF,CADF,CAMD,CAPM,CAAP,CAQD,EAED,QAASE,CAAAA,qBAAT,CAA+BL,GAA/B,CAAoC,CAClC,MAAOA,CAAAA,GAAG,CAACM,OAAJ,CAAY,WAAZ,CAAyB,KAAzB,CAAP,CACA;AACD,EAED,QAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqB,CACnB,MAAQA,CAAAA,KAAK,CAAG,EAAR,YAAiBA,KAAjB,YAA8BA,KAA9B,CAAR,CACD,CAED,QAASC,CAAAA,OAAT,CAAiBb,IAAjB,CAAuB,CACrB,MAAOA,CAAAA,IAAI,CAACc,WAAL,GAAqBH,IAAI,CAACX,IAAI,CAACe,QAAL,GAAkB,CAAnB,CAAzB,CAAiDJ,IAAI,CAACX,IAAI,CAACa,OAAL,EAAD,CAA5D,CACD,CAED,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,QAAD,CAAc,CAC5B,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,IAAJ,EAAd,CACA,MAAON,CAAAA,OAAO,CAACI,QAAD,CAAP,GAAsBJ,OAAO,CAACK,KAAD,CAApC,CACD,CAHD,CAKA,GAAME,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACH,QAAD,CAAc,CAC3B,GAAII,CAAAA,IAAI,CAAG,GAAIF,CAAAA,IAAJ,EAAX,CACAE,IAAI,CAACC,OAAL,CAAaD,IAAI,CAACR,OAAL,GAAiB,CAA9B,EACA,MAAOA,CAAAA,OAAO,CAACI,QAAD,CAAP,GAAsBJ,OAAO,CAACQ,IAAD,CAApC,CACD,CAJD,CAMA,GAAME,CAAAA,WAAW,CAAG,CAAEC,GAAG,CAAE,SAAP,CAAkBC,KAAK,CAAE,OAAzB,CAApB,CACA,QAASC,CAAAA,UAAT,CAAoBT,QAApB,CAA8B,CAC5B,GAAID,OAAO,CAACC,QAAD,CAAX,CAAuB,CACrB,MAAO,OAAP,CACD,CAFD,IAEO,IAAIG,MAAM,CAACH,QAAD,CAAV,CAAsB,CAC3B,MAAO,WAAP,CACD,CAFM,IAEA,CACL,MAAOA,CAAAA,QAAQ,CAACU,cAAT,CAAwB,OAAxB,CAAiCJ,WAAjC,CAAP,CACD,CACF,CAED,OAASxB,cAAT,CAAyBI,cAAzB,CAAyCM,qBAAzC,CAAgEiB,UAAhE","sourcesContent":["import React from 'react';\n\nfunction printTimestamp(date) {\n  return (date.getHours() < 10 ? \"0\" : \"\") + date.getHours() + \":\" + (date.getMinutes() < 10 ? \"0\" : \"\") + date.getMinutes();\n};\n\nfunction formatBodyText(txt) {\n  return txt.split('\\n').map(function (item, key) {\n    return (\n      <span key={key}>\n        {item}\n        <br />\n      </span>\n    )\n  });\n};\n\nfunction formatBodyPreviewText(txt) {\n  return txt.replace(/\\n[\\s\\S]*/, \"...\");\n  // because pattern /.*/ is not applied over multiple lines and we want to remove all subsequent lines\n};\n\nfunction pad2(digit) {\n  return (digit < 10 ? `0${digit}` : `${digit}`);\n}\n\nfunction getDate(date) {\n  return date.getFullYear() + pad2(date.getMonth() + 1) + pad2(date.getDate());\n}\n\nconst isToday = (someDate) => {\n  const today = new Date()\n  return getDate(someDate) === getDate(today);\n}\n\nconst isYday = (someDate) => {\n  let yday = new Date();\n  yday.setDate(yday.getDate() - 1);\n  return getDate(someDate) === getDate(yday);\n}\n\nconst dateOptions = { day: 'numeric', month: 'short' };\nfunction prettyDate(someDate) {\n  if (isToday(someDate)) {\n    return \"Today\";\n  } else if (isYday(someDate)) {\n    return \"Yesterday\";\n  } else {\n    return someDate.toLocaleString('en-US', dateOptions)\n  }\n}\n\nexport { printTimestamp, formatBodyText, formatBodyPreviewText, prettyDate }"]},"metadata":{},"sourceType":"module"}