{"ast":null,"code":"import _taggedTemplateLiteral from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject6(){var data=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  height: 4px;\\n  left: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  top: auto;\\n  \",\"\\n\"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=_taggedTemplateLiteral([\"\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n\"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n  outline: none;\\n  -webkit-appearance: button;\\n  -webkit-writing-mode: horizontal-tb !important;\\n  text-rendering: auto;\\n  word-spacing: normal;\\n  text-indent: 0px;\\n  text-shadow: none;\\n  display: inline-block;\\n  text-align: center;\\n  align-items: flex-start;\\n  box-sizing: border-box;\\n  margin: 0em;\\n  font: 400 11px system-ui;\\n  -webkit-font-smoothing: antialiased;\\n\\n  color: rgb(34, 34, 34);\\n  text-transform: uppercase;\\n  font-weight: \",\";\\n  line-height: 1.1;\\n  letter-spacing: 2px;\\n  cursor: pointer;\\n  margin-right: auto;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  font-family: inherit;\\n  border-width: initial;\\n  border-style: none;\\n  border-color: initial;\\n  border-image: initial;\\n  background: none;\\n  transition: color 0.2s ease 0s;\\n  padding: 12px;\\n  overflow: hidden;\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  padding: 0;\\n  border: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n  -webkit-font-smoothing: antialiased;\\n  display: flex;\\n  position: relative;\\n  min-width: 44px;\\n  margin-right: auto;\\n  margin-left: auto;\\n  flex: 0 1 auto;\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  margin-left: 12px;\\n  margin-right: 12px;\\n  border-style: solid;\\n  border-width: 0px 0px 1px;\\n  border-color: rgb(198, 202, 215);\\n  padding: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n  -webkit-font-smoothing: antialiased;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  flex-grow: 0;\\n  flex-basis: 2.3em;\\n\\n  height: 2.3em;\\n  width: 100%;\\n  z-index: 9999;\\n  background: #ffffff;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import styled from'styled-components';import{SvgPhone}from'./CallDialpadComponents';import{Badge}from'./CommonComponents';function ChannelSwitcher(props){var msgUnreadsTotal=0;for(var contact in props.msgUnreadsCache){msgUnreadsTotal+=props.msgUnreadsCache[contact];}return/*#__PURE__*/React.createElement(TabsContainer,null,/*#__PURE__*/React.createElement(Tabs,null,/*#__PURE__*/React.createElement(TabHeader,null,/*#__PURE__*/React.createElement(Tab,{selected:props.selectedChannel==='sms'?true:false,onClick:props.setChannel.bind(null,'sms')},msgUnreadsTotal>0&&/*#__PURE__*/React.createElement(Badge,null,msgUnreadsTotal),/*#__PURE__*/React.createElement(Channel,null,\"sms\")),/*#__PURE__*/React.createElement(StateIndicator,{selected:props.selectedChannel==='sms'?true:false})),/*#__PURE__*/React.createElement(TabHeader,null,/*#__PURE__*/React.createElement(Tab,{selected:props.selectedChannel==='call'?true:false,onClick:props.setChannel.bind(null,'call')},props.incomingCall!==null&&/*#__PURE__*/ // ToDo: replace with proper indicator of any (not just incoming) call in progress\nReact.createElement(Badge,null,/*#__PURE__*/React.createElement(SvgPhone,{style:{height:'0.75em'}})),/*#__PURE__*/React.createElement(Channel,null,\"call\")),/*#__PURE__*/React.createElement(StateIndicator,{selected:props.selectedChannel==='call'?true:false}))));}var TabsContainer=styled.div(_templateObject());var Tabs=styled.div(_templateObject2());var TabHeader=styled.div(_templateObject3());var Tab=styled.button(_templateObject4(),function(props){return props.selected===true?'bold':'normal';});var Channel=styled.span(_templateObject5());var StateIndicator=styled.div(_templateObject6(),function(props){return props.selected===true?'background: '+process.env.REACT_APP_ACCENT_COLOR+';':'';});export default ChannelSwitcher;","map":{"version":3,"sources":["/root/twilio-phone-client/src/components/ChannelSwitcher.js"],"names":["React","styled","SvgPhone","Badge","ChannelSwitcher","props","msgUnreadsTotal","contact","msgUnreadsCache","selectedChannel","setChannel","bind","incomingCall","height","TabsContainer","div","Tabs","TabHeader","Tab","button","selected","Channel","span","StateIndicator","process","env","REACT_APP_ACCENT_COLOR"],"mappings":"6lFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,QAAT,KAAyB,yBAAzB,CACA,OAASC,KAAT,KAAsB,oBAAtB,CAEA,QAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CAC9B,GAAIC,CAAAA,eAAe,CAAG,CAAtB,CACA,IAAK,GAAMC,CAAAA,OAAX,GAAsBF,CAAAA,KAAK,CAACG,eAA5B,CAA6C,CAC3CF,eAAe,EAAID,KAAK,CAACG,eAAN,CAAsBD,OAAtB,CAAnB,CACD,CACD,mBACE,oBAAC,aAAD,mBACE,oBAAC,IAAD,mBACE,oBAAC,SAAD,mBACE,oBAAC,GAAD,EACE,QAAQ,CAAEF,KAAK,CAACI,eAAN,GAA0B,KAA1B,CAAkC,IAAlC,CAAyC,KADrD,CAEE,OAAO,CAAEJ,KAAK,CAACK,UAAN,CAAiBC,IAAjB,CAAsB,IAAtB,CAA4B,KAA5B,CAFX,EAIGL,eAAe,CAAG,CAAlB,eAAuB,oBAAC,KAAD,MAAQA,eAAR,CAJ1B,cAKE,oBAAC,OAAD,YALF,CADF,cAQE,oBAAC,cAAD,EACE,QAAQ,CAAED,KAAK,CAACI,eAAN,GAA0B,KAA1B,CAAkC,IAAlC,CAAyC,KADrD,EARF,CADF,cAaE,oBAAC,SAAD,mBACE,oBAAC,GAAD,EACE,QAAQ,CAAEJ,KAAK,CAACI,eAAN,GAA0B,MAA1B,CAAmC,IAAnC,CAA0C,KADtD,CAEE,OAAO,CAAEJ,KAAK,CAACK,UAAN,CAAiBC,IAAjB,CAAsB,IAAtB,CAA4B,MAA5B,CAFX,EAIGN,KAAK,CAACO,YAAN,GAAuB,IAAvB,gBAAiC;AAChC,oBAAC,KAAD,mBACE,oBAAC,QAAD,EAAU,KAAK,CAAE,CAAEC,MAAM,CAAE,QAAV,CAAjB,EADF,CALJ,cASE,oBAAC,OAAD,aATF,CADF,cAYE,oBAAC,cAAD,EACE,QAAQ,CAAER,KAAK,CAACI,eAAN,GAA0B,MAA1B,CAAmC,IAAnC,CAA0C,KADtD,EAZF,CAbF,CADF,CADF,CAkCD,CAED,GAAMK,CAAAA,aAAa,CAAGb,MAAM,CAACc,GAAV,mBAAnB,CAUA,GAAMC,CAAAA,IAAI,CAAGf,MAAM,CAACc,GAAV,oBAAV,CAcA,GAAME,CAAAA,SAAS,CAAGhB,MAAM,CAACc,GAAV,oBAAf,CAeA,GAAMG,CAAAA,GAAG,CAAGjB,MAAM,CAACkB,MAAV,oBAkBQ,SAACd,KAAD,QAAYA,CAAAA,KAAK,CAACe,QAAN,GAAmB,IAAnB,CAA0B,MAA1B,CAAmC,QAA/C,EAlBR,CAAT,CAoCA,GAAMC,CAAAA,OAAO,CAAGpB,MAAM,CAACqB,IAAV,oBAAb,CASA,GAAMC,CAAAA,cAAc,CAAGtB,MAAM,CAACc,GAAV,oBAOhB,SAACV,KAAD,QACAA,CAAAA,KAAK,CAACe,QAAN,GAAmB,IAAnB,CACI,eAAiBI,OAAO,CAACC,GAAR,CAAYC,sBAA7B,CAAsD,GAD1D,CAEI,EAHJ,EAPgB,CAApB,CAaA,cAAetB,CAAAA,eAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { SvgPhone } from './CallDialpadComponents';\nimport { Badge } from './CommonComponents';\n\nfunction ChannelSwitcher(props) {\n  let msgUnreadsTotal = 0;\n  for (const contact in props.msgUnreadsCache) {\n    msgUnreadsTotal += props.msgUnreadsCache[contact];\n  }\n  return (\n    <TabsContainer>\n      <Tabs>\n        <TabHeader>\n          <Tab\n            selected={props.selectedChannel === 'sms' ? true : false}\n            onClick={props.setChannel.bind(null, 'sms')}\n          >\n            {msgUnreadsTotal > 0 && <Badge>{msgUnreadsTotal}</Badge>}\n            <Channel>sms</Channel>\n          </Tab>\n          <StateIndicator\n            selected={props.selectedChannel === 'sms' ? true : false}\n          />\n        </TabHeader>\n        <TabHeader>\n          <Tab\n            selected={props.selectedChannel === 'call' ? true : false}\n            onClick={props.setChannel.bind(null, 'call')}\n          >\n            {props.incomingCall !== null && ( // ToDo: replace with proper indicator of any (not just incoming) call in progress\n              <Badge>\n                <SvgPhone style={{ height: '0.75em' }} />\n              </Badge>\n            )}\n            <Channel>call</Channel>\n          </Tab>\n          <StateIndicator\n            selected={props.selectedChannel === 'call' ? true : false}\n          />\n        </TabHeader>\n      </Tabs>\n    </TabsContainer>\n  );\n}\n\nconst TabsContainer = styled.div`\n  flex-grow: 0;\n  flex-basis: 2.3em;\n\n  height: 2.3em;\n  width: 100%;\n  z-index: 9999;\n  background: #ffffff;\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  margin-left: 12px;\n  margin-right: 12px;\n  border-style: solid;\n  border-width: 0px 0px 1px;\n  border-color: rgb(198, 202, 215);\n  padding: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  -webkit-font-smoothing: antialiased;\n`;\n\nconst TabHeader = styled.div`\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  min-width: 44px;\n  margin-right: auto;\n  margin-left: auto;\n  flex: 0 1 auto;\n`;\n\nconst Tab = styled.button`\n  outline: none;\n  -webkit-appearance: button;\n  -webkit-writing-mode: horizontal-tb !important;\n  text-rendering: auto;\n  word-spacing: normal;\n  text-indent: 0px;\n  text-shadow: none;\n  display: inline-block;\n  text-align: center;\n  align-items: flex-start;\n  box-sizing: border-box;\n  margin: 0em;\n  font: 400 11px system-ui;\n  -webkit-font-smoothing: antialiased;\n\n  color: rgb(34, 34, 34);\n  text-transform: uppercase;\n  font-weight: ${(props) => (props.selected === true ? 'bold' : 'normal')};\n  line-height: 1.1;\n  letter-spacing: 2px;\n  cursor: pointer;\n  margin-right: auto;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-family: inherit;\n  border-width: initial;\n  border-style: none;\n  border-color: initial;\n  border-image: initial;\n  background: none;\n  transition: color 0.2s ease 0s;\n  padding: 12px;\n  overflow: hidden;\n`;\n\nconst Channel = styled.span`\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n`;\n\nconst StateIndicator = styled.div`\n  position: absolute;\n  height: 4px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  top: auto;\n  ${(props) =>\n    props.selected === true\n      ? 'background: ' + process.env.REACT_APP_ACCENT_COLOR + ';'\n      : ''}\n`;\n\nexport default ChannelSwitcher;\n"]},"metadata":{},"sourceType":"module"}