{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Deferred Promise\n */\n\nvar Deferred =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   */\n  function Deferred() {\n    var _this = this;\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n\n  Object.defineProperty(Deferred.prototype, \"promise\", {\n    /**\n     * @returns The {@link Deferred} Promise\n     */\n    get: function get() {\n      return this._promise;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Rejects this promise\n   */\n\n  Deferred.prototype.reject = function (reason) {\n    this._reject(reason);\n  };\n  /**\n   * Resolves this promise\n   */\n\n\n  Deferred.prototype.resolve = function (value) {\n    this._resolve(value);\n  };\n\n  return Deferred;\n}();\n\nexports.default = Deferred;","map":{"version":3,"sources":["../../lib/twilio/deferred.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;AAEH;;AAEG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AAgBE;;AAEG;AACH,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,QAAL,GAAgB,IAAI,OAAJ,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/C,MAAA,KAAI,CAAC,QAAL,GAAgB,OAAhB;AACA,MAAA,KAAI,CAAC,OAAL,GAAe,MAAf;AACD,KAHe,CAAhB;AAID;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEG;SACH,eAAA;AACE,aAAO,KAAK,QAAZ;AACD,KAFU;oBAAA;;AAAA,GAAX;AAIA;;AAEG;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,MAAP,EAAmB;AACjB,SAAK,OAAL,CAAa,MAAb;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,KAAR,EAAmB;AACjB,SAAK,QAAL,CAAc,KAAd;AACD,GAFD;;AAGF,SAAA,QAAA;AAAC,CA9CD,EAAA","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\n/**\n * Deferred Promise\n */\nexport default class Deferred {\n  /**\n   * This {@link Deferred} Promise\n   */\n  private readonly _promise: Promise<any>;\n\n  /**\n   * The Promise's reject method.\n   */\n  private _reject: (reason?: any) => void;\n\n  /**\n   * The Promise's resolve method.\n   */\n  private _resolve: (value?: any) => void;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._promise = new Promise<any>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * @returns The {@link Deferred} Promise\n   */\n  get promise(): Promise<any> {\n    return this._promise;\n  }\n\n  /**\n   * Rejects this promise\n   */\n  reject(reason?: any): void {\n    this._reject(reason);\n  }\n\n  /**\n   * Resolves this promise\n   */\n  resolve(value?: any): void {\n    this._resolve(value);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}