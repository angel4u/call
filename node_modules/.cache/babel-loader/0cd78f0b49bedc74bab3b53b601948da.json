{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"./errors\");\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\n\n\nvar bandFrequencies = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960]\n};\n\nvar DialtonePlayer =\n/** @class */\nfunction () {\n  function DialtonePlayer(_context) {\n    var _this = this;\n\n    this._context = _context;\n    /**\n     * Gain nodes, reducing the frequency.\n     */\n\n    this._gainNodes = [];\n    this._gainNodes = [this._context.createGain(), this._context.createGain()];\n\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.connect(_this._context.destination);\n      gainNode.gain.value = 0.1;\n\n      _this._gainNodes.push(gainNode);\n    });\n  }\n\n  DialtonePlayer.prototype.cleanup = function () {\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.disconnect();\n    });\n  };\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n\n\n  DialtonePlayer.prototype.play = function (sound) {\n    var _this = this;\n\n    var frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new errors_1.InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    var oscillators = [this._context.createOscillator(), this._context.createOscillator()];\n    oscillators.forEach(function (oscillator, i) {\n      oscillator.type = 'sine';\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(_this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(_this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', function () {\n        return oscillator.disconnect();\n      });\n    });\n  };\n\n  return DialtonePlayer;\n}();\n\nexports.default = DialtonePlayer;","map":{"version":3,"sources":["../../lib/twilio/dialtonePlayer.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;AAEH,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;AAEG;;;AACH,IAAM,eAAe,GAAsC;AACzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CADkD;AAEzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAFkD;AAGzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAHkD;AAIzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAJkD;AAKzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CALkD;AAMzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CANkD;AAOzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAPkD;AAQzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CARkD;AASzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CATkD;AAUzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAVkD;AAWzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAXkD;AAYzD,EAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP;AAZkD,CAA3D;;AAeA,IAAA,cAAA;AAAA;AAAA,YAAA;AAME,WAAA,cAAA,CAAoB,QAApB,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;AAAoB,SAAA,QAAA,GAAA,QAAA;AALpB;;AAEG;;AACH,SAAA,UAAA,GAAyB,EAAzB;AAGE,SAAK,UAAL,GAAkB,CAChB,KAAK,QAAL,CAAc,UAAd,EADgB,EAEhB,KAAK,QAAL,CAAc,UAAd,EAFgB,CAAlB;;AAKA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAmB;AACzC,MAAA,QAAQ,CAAC,OAAT,CAAiB,KAAI,CAAC,QAAL,CAAc,WAA/B;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,GAAsB,GAAtB;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,QAArB;AACD,KAJD;AAKD;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAmB;AACzC,MAAA,QAAQ,CAAC,UAAT;AACD,KAFD;AAGD,GAJD;AAMA;;;AAGG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,KAAL,EAAkB;AAAlB,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,WAAW,GAAG,eAAe,CAAC,KAAD,CAAnC;;AAEA,QAAI,CAAC,WAAL,EAAkB;AAChB,YAAM,IAAI,QAAA,CAAA,oBAAJ,CAAyB,yBAAzB,CAAN;AACD;;AAED,QAAM,WAAW,GAAqB,CACpC,KAAK,QAAL,CAAc,gBAAd,EADoC,EAEpC,KAAK,QAAL,CAAc,gBAAd,EAFoC,CAAtC;AAKA,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,UAAD,EAA6B,CAA7B,EAAsC;AACxD,MAAA,UAAU,CAAC,IAAX,GAAkB,MAAlB;AACA,MAAA,UAAU,CAAC,SAAX,CAAqB,KAArB,GAA6B,WAAW,CAAC,CAAD,CAAxC;AACA,MAAA,UAAU,CAAC,OAAX,CAAmB,KAAI,CAAC,UAAL,CAAgB,CAAhB,CAAnB;AACA,MAAA,UAAU,CAAC,KAAX;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,KAAI,CAAC,QAAL,CAAc,WAAd,GAA4B,GAA5C;AACA,MAAA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,YAAA;AAAM,eAAA,UAAU,CAAV,UAAA,EAAA;AAAuB,OAAlE;AACD,KAPD;AAQD,GApBD;;AAqBF,SAAA,cAAA;AAAC,CAlDD,EAAA","sourcesContent":["/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nimport { InvalidArgumentError } from './errors';\n\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nconst bandFrequencies: Partial<Record<string, number[]>> = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960],\n};\n\nexport default class DialtonePlayer {\n  /**\n   * Gain nodes, reducing the frequency.\n   */\n  _gainNodes: GainNode[] = [];\n\n  constructor(private _context: AudioContext) {\n    this._gainNodes = [\n      this._context.createGain(),\n      this._context.createGain(),\n    ];\n\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.connect(this._context.destination);\n      gainNode.gain.value = 0.1;\n      this._gainNodes.push(gainNode);\n    });\n  }\n\n  cleanup(): void {\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.disconnect();\n    });\n  }\n\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  play(sound: string): void {\n    const frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    const oscillators: OscillatorNode[] = [\n      this._context.createOscillator(),\n      this._context.createOscillator(),\n    ];\n\n    oscillators.forEach((oscillator: OscillatorNode, i: number) => {\n      oscillator.type = 'sine' as OscillatorType;\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', () => oscillator.disconnect());\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}