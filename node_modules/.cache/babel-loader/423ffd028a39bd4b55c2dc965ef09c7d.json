{"ast":null,"code":"var _jsxFileName = \"/root/twilio-phone-client/src/helpers.js\";\nimport React from 'react';\n\nfunction printTimestamp(date) {\n  return (date.getHours() < 10 ? \"0\" : \"\") + date.getHours() + \":\" + (date.getMinutes() < 10 ? \"0\" : \"\") + date.getMinutes();\n}\n\n;\n\nfunction formatBodyText(txt) {\n  return txt.split('\\n').map(function (item, key) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, item, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }));\n  });\n}\n\n;\n\nfunction formatBodyPreviewText(txt) {\n  return txt.replace(/\\n[\\s\\S]*/, \"...\"); // because pattern /.*/ is not applied over multiple lines and we want to remove all subsequent lines\n}\n\n;\n\nfunction pad2(digit) {\n  return digit < 10 ? `0${digit}` : `${digit}`;\n}\n\nfunction getDate(date) {\n  return date.getFullYear() + pad2(date.getMonth() + 1) + pad2(date.getDate());\n}\n\nconst isToday = someDate => {\n  const today = new Date();\n  return getDate(someDate) === getDate(today);\n};\n\nconst isYday = someDate => {\n  let yday = new Date();\n  yday.setDate(yday.getDate() - 1);\n  return getDate(someDate) === getDate(yday);\n};\n\nconst dateOptions = {\n  day: 'numeric',\n  month: 'short'\n};\n\nfunction prettyDate(someDate) {\n  if (isToday(someDate)) {\n    return \"Today\";\n  } else if (isYday(someDate)) {\n    return \"Yesterday\";\n  } else {\n    return someDate.toLocaleString('en-US', dateOptions);\n  }\n}\n\nexport { printTimestamp, formatBodyText, formatBodyPreviewText, prettyDate };","map":{"version":3,"sources":["/root/twilio-phone-client/src/helpers.js"],"names":["React","printTimestamp","date","getHours","getMinutes","formatBodyText","txt","split","map","item","key","formatBodyPreviewText","replace","pad2","digit","getDate","getFullYear","getMonth","isToday","someDate","today","Date","isYday","yday","setDate","dateOptions","day","month","prettyDate","toLocaleString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAO,CAACA,IAAI,CAACC,QAAL,KAAkB,EAAlB,GAAuB,GAAvB,GAA6B,EAA9B,IAAoCD,IAAI,CAACC,QAAL,EAApC,GAAsD,GAAtD,IAA6DD,IAAI,CAACE,UAAL,KAAoB,EAApB,GAAyB,GAAzB,GAA+B,EAA5F,IAAkGF,IAAI,CAACE,UAAL,EAAzG;AACD;;AAAA;;AAED,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOA,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC9C,wBACE;AAAM,MAAA,GAAG,EAAEA,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPM,CAAP;AAQD;;AAAA;;AAED,SAASE,qBAAT,CAA+BL,GAA/B,EAAoC;AAClC,SAAOA,GAAG,CAACM,OAAJ,CAAY,WAAZ,EAAyB,KAAzB,CAAP,CADkC,CAElC;AACD;;AAAA;;AAED,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,SAAQA,KAAK,GAAG,EAAR,GAAc,IAAGA,KAAM,EAAvB,GAA4B,GAAEA,KAAM,EAA5C;AACD;;AAED,SAASC,OAAT,CAAiBb,IAAjB,EAAuB;AACrB,SAAOA,IAAI,CAACc,WAAL,KAAqBH,IAAI,CAACX,IAAI,CAACe,QAAL,KAAkB,CAAnB,CAAzB,GAAiDJ,IAAI,CAACX,IAAI,CAACa,OAAL,EAAD,CAA5D;AACD;;AAED,MAAMG,OAAO,GAAIC,QAAD,IAAc;AAC5B,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,SAAON,OAAO,CAACI,QAAD,CAAP,KAAsBJ,OAAO,CAACK,KAAD,CAApC;AACD,CAHD;;AAKA,MAAME,MAAM,GAAIH,QAAD,IAAc;AAC3B,MAAII,IAAI,GAAG,IAAIF,IAAJ,EAAX;AACAE,EAAAA,IAAI,CAACC,OAAL,CAAaD,IAAI,CAACR,OAAL,KAAiB,CAA9B;AACA,SAAOA,OAAO,CAACI,QAAD,CAAP,KAAsBJ,OAAO,CAACQ,IAAD,CAApC;AACD,CAJD;;AAMA,MAAME,WAAW,GAAG;AAAEC,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAApB;;AACA,SAASC,UAAT,CAAoBT,QAApB,EAA8B;AAC5B,MAAID,OAAO,CAACC,QAAD,CAAX,EAAuB;AACrB,WAAO,OAAP;AACD,GAFD,MAEO,IAAIG,MAAM,CAACH,QAAD,CAAV,EAAsB;AAC3B,WAAO,WAAP;AACD,GAFM,MAEA;AACL,WAAOA,QAAQ,CAACU,cAAT,CAAwB,OAAxB,EAAiCJ,WAAjC,CAAP;AACD;AACF;;AAED,SAASxB,cAAT,EAAyBI,cAAzB,EAAyCM,qBAAzC,EAAgEiB,UAAhE","sourcesContent":["import React from 'react';\n\nfunction printTimestamp(date) {\n  return (date.getHours() < 10 ? \"0\" : \"\") + date.getHours() + \":\" + (date.getMinutes() < 10 ? \"0\" : \"\") + date.getMinutes();\n};\n\nfunction formatBodyText(txt) {\n  return txt.split('\\n').map(function (item, key) {\n    return (\n      <span key={key}>\n        {item}\n        <br />\n      </span>\n    )\n  });\n};\n\nfunction formatBodyPreviewText(txt) {\n  return txt.replace(/\\n[\\s\\S]*/, \"...\");\n  // because pattern /.*/ is not applied over multiple lines and we want to remove all subsequent lines\n};\n\nfunction pad2(digit) {\n  return (digit < 10 ? `0${digit}` : `${digit}`);\n}\n\nfunction getDate(date) {\n  return date.getFullYear() + pad2(date.getMonth() + 1) + pad2(date.getDate());\n}\n\nconst isToday = (someDate) => {\n  const today = new Date()\n  return getDate(someDate) === getDate(today);\n}\n\nconst isYday = (someDate) => {\n  let yday = new Date();\n  yday.setDate(yday.getDate() - 1);\n  return getDate(someDate) === getDate(yday);\n}\n\nconst dateOptions = { day: 'numeric', month: 'short' };\nfunction prettyDate(someDate) {\n  if (isToday(someDate)) {\n    return \"Today\";\n  } else if (isYday(someDate)) {\n    return \"Yesterday\";\n  } else {\n    return someDate.toLocaleString('en-US', dateOptions)\n  }\n}\n\nexport { printTimestamp, formatBodyText, formatBodyPreviewText, prettyDate }"]},"metadata":{},"sourceType":"module"}