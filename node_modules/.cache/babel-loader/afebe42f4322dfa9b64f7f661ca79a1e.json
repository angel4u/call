{"ast":null,"code":"import _taggedTemplateLiteral from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _defineProperty from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/root/twilio-phone-client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createSuper\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: nowrap;\\n  align-items: stretch;\\n  max-width: 400px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{Component}from'react';import styled from'styled-components';import update from'immutability-helper';import jwt_decode from'jwt-decode';import{formParams,stringify}from'../lib/common';import ChannelSwitcher from'./ChannelSwitcher';import ChannelContent from'./ChannelContent';import AuthForm from'./AuthForm';import{ModalMessage}from'./CommonComponents';var TwilioChat=require('twilio-chat');var TwilioVoice=require('twilio-client');var maxAuthAttempts=3;var Canvas=/*#__PURE__*/function(_Component){_inherits(Canvas,_Component);var _super=_createSuper(Canvas);function Canvas(props){var _this;_classCallCheck(this,Canvas);_this=_super.call(this,props);_this._fetchToken=function(){return new Promise(function(resolve,reject){var accessTokenGenerator=(process.env.REACT_APP_RUNTIME_DOMAIN?process.env.REACT_APP_RUNTIME_DOMAIN:'')+'/getAccessToken';var body=formParams({secret:_this.state.secret// handle escaping\n});fetch(accessTokenGenerator,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:body}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var errText;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(response.status===200)){_context.next=4;break;}return _context.abrupt(\"return\",response.text());case 4:if(!(response.status===401)){_context.next=11;break;}_context.next=7;return response.text();case 7:errText=_context.sent;_this.setState({authorized:false,authError:_this.state.authCounter===0?'':errText,authCounter:_this.state.authCounter+1});console.error('Authorization failed - check if SECRET env variable is set correctly:',errText);reject(errText);case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()).then(function(token){if(token!==undefined){_this.setState({authorized:true,authError:'',authCounter:0});resolve(token);}}).catch(function(err){console.error('Error fetching Access Token:',err);_this.setState({displayError:\"Error fetching Access Token (\".concat(stringify(err),\")\")});reject(err);});});};_this.setSecret=function(secret){_this.setState({secret:secret},function(){return _this.initClients();});};_this.setCallDisplay=function(callDisplay){_this.setState({callDisplay:callDisplay});};_this.setCallConnection=function(callConnection){_this.callConnection=callConnection;};_this.getCallConnection=function(){return _this.callConnection;};_this.setCallStartTime=function(callStartTime){_this.callStartTime=callStartTime;};_this.getCallStartTime=function(){return _this.callStartTime;};_this.setCallNextKeyReset=function(callNextKeyReset){_this.callNextKeyReset=callNextKeyReset;};_this.getCallNextKeyReset=function(){return _this.callNextKeyReset;};_this.setCallTypingPN=function(callTypingPN){_this.callTypingPN=callTypingPN;};_this.getCallTypingPN=function(){return _this.callTypingPN;};_this.setUnreadsCache=function(contact,unread){_this.setState({msgUnreadsCache:update(_this.state.msgUnreadsCache,_defineProperty({},contact,{$set:unread}))});};_this.setUnreadMsgs=function(channel,contact){// if there's no consumed messages, all messages are unread\n// (getUnconsumedMessagesCount doesn't really work in this case\n// so we need to handle this edge case manually)\nif(channel.lastConsumedMessageIndex===null){channel.getMessagesCount().then(function(cnt){_this.setState({msgUnreadsCache:update(_this.state.msgUnreadsCache,_defineProperty({},contact,{$set:cnt}))});});}else{channel.getUnconsumedMessagesCount().then(function(cnt){_this.setState({msgUnreadsCache:update(_this.state.msgUnreadsCache,_defineProperty({},contact,{$set:cnt}))});});}};_this.setMsgCachePage=function(contact,messages,paginator){_this.setState({msgCache:update(_this.state.msgCache,_defineProperty({},contact,{$set:messages})),pgtrCache:update(_this.state.msgPgtrCache,_defineProperty({},contact,{$set:paginator}))});};_this.addMsgCachePage=function(contact,messages,paginator){_this.setState({msgCache:update(_this.state.msgCache,_defineProperty({},contact,{$unshift:messages})),pgtrCache:update(_this.state.msgPgtrCache,_defineProperty({},contact,{$set:paginator}))});};_this.addMsgCacheMsg=function(contact,msg){if(_this.state.msgCache[contact]===undefined){_this.setState({msgCache:update(_this.state.msgCache,{$merge:_defineProperty({},contact,[])})});}_this.setState({msgCache:update(_this.state.msgCache,_defineProperty({},contact,{$push:[msg]}))});};_this.getToken=function(){return new Promise(function(resolve,reject){if(_this.state.token){var decoded_token=jwt_decode(_this.state.token);var s_now=Math.floor(Date.now()/1000);var s_expire=decoded_token.exp;console.log(\"Token is expiring in \".concat(s_expire-s_now,\"s\"));if(s_expire-s_now<300){// token is about to expire, let's renew it\n_this._fetchToken().then(function(token){_this.setState({token:token});_this.getTokenActive=false;resolve(token);});}else{_this.getTokenActive=false;resolve(_this.state.token);}}else{_this._fetchToken().then(function(token){_this.setState({token:token});_this.getTokenActive=false;resolve(token);});}});};_this.initClients=function(){if(_this.state.chatClient===null&&_this.state.voiceClient===null){_this.getToken().then(function(token){// initialize Voice client\nvar voiceClient=new TwilioVoice.Device();voiceClient.setup(token,{// Set Opus as our preferred codec. Opus generally performs better,\n// requiring less bandwidth and providing better audio quality in\n// restrained network conditions. Opus will be default in 2.0.\ncodecPreferences:['opus','pcmu'],// Use fake DTMF tones client-side. Real tones are still sent to the\n// other end of the call, but the client-side DTMF tones are fake.\n// This prevents the local mic capturing the DTMF tone a second time\n// and sending the tone twice. This will be default in 2.0.\nfakeLocalDTMF:true,// Use `enableRingingState` to enable the device to emit the `ringing`\n// state. The TwiML backend also needs to have the attribute\n// `answerOnBridge` also set to true in the `Dial` verb. This option\n// changes the behavior of the SDK to consider a call `ringing`\n// starting from the connection to the TwiML backend to when the\n// recipient of the `Dial` verb answers.\nenableRingingState:true});voiceClient.on('ready',function(device){console.log('voiceClient is ready');});voiceClient.on('error',function(error){console.log('Twilio.Device Error: ',error);// JWT Token Expired\nif(error.code===31205){_this.getToken().then(function(){_this.state.chatClient.updateToken(_this.state.token);_this.state.voiceClient.updateToken(_this.state.token);console.log('Token updated after expiration (from voiceClient)');});}});voiceClient.on('incoming',function(connection){console.log('PC: INCOMING event fired from '+connection.parameters.From);_this.setState({incomingCall:connection});_this.setCallConnection(connection);connection.on('reject',function(connection){// when incoming call gets rejected from CallCanvas, update state\n_this.setState({incomingCall:null});});});voiceClient.on('cancel',function(connection){console.log('PC: CANCEL event fired');_this.setState({incomingCall:null});});voiceClient.on('connect',function(connection){console.log('PC: CONNECT event fired');_this.setState({incomingCall:null});// cleanup the incoming call state and let the component handle this natively\n});voiceClient.on('disconnect',function(connection){console.log('PC: DISCONNECT event fired');_this.setCallDisplay('');_this.setCallStartTime(null);_this.setCallTypingPN(true);_this.setCallNextKeyReset(false);});console.log('voiceClient is initialized');_this.setState({voiceClient:voiceClient});// initialize Chat client\nTwilioChat.Client.create(token).then(function(chatClient){_this.setState({chatClient:chatClient});chatClient.getSubscribedChannels().then(function(paginator){var chatChannelList={};for(var i=0;i<paginator.items.length;i++){var channel=paginator.items[i];chatChannelList[channel.uniqueName]=channel;}console.log('chatClient is initialized');_this.setState({chatChannelList:chatChannelList});});chatClient.on('channelRemoved',function(channel){if(_this.state.chatChannelList!==null){_this.setState({chatChannelList:update(_this.state.chatChannelList,{$unset:[channel.uniqueName]}),msgUnreadsCache:update(_this.state.msgUnreadsCache,{$unset:[channel.uniqueName]}),msgCache:update(_this.state.msgCache,{$unset:[channel.uniqueName]}),msgPgtrCache:update(_this.state.msgPgtrCache,{$unset:[channel.uniqueName]})});}});chatClient.on('channelAdded',function(channel){if(_this.state.chatChannelList!==null){_this.setState({chatChannelList:update(_this.state.chatChannelList,{$merge:_defineProperty({},channel.uniqueName,channel)}),msgCache:update(_this.state.msgCache,_defineProperty({},channel.uniqueName,{$set:undefined}))});}});chatClient.on('channelUpdated',function(_ref2){var channel=_ref2.channel,updateReasons=_ref2.updateReasons;if(_this.state.chatChannelList!==null&&updateReasons.includes('lastMessage')){_this.setState({chatChannelList:update(_this.state.chatChannelList,_defineProperty({},channel.uniqueName,{$set:channel}))});}});chatClient.on('tokenAboutToExpire',function(){_this.getToken().then(function(){_this.state.chatClient.updateToken(_this.state.token);_this.state.voiceClient.updateToken(_this.state.token);console.log('Token updated before expiration');});});chatClient.on('tokenExpired',function(){_this.getToken().then(function(){_this.state.chatClient.updateToken(_this.state.token);_this.state.voiceClient.updateToken(_this.state.token);console.log('Token updated after expiration (from chatClient)');});});});});}};_this.setChannel=function(selectedChannel){_this.setState({selectedChannel:selectedChannel});};_this.state={selectedChannel:'sms',chatClient:null,chatChannelList:null,voiceClient:null,incomingCall:null,token:null,authorized:false,authCounter:0,authError:'',secret:localStorage.getItem('secret'),displayError:null,msgUnreadsCache:{},msgCache:{},msgPgtrCache:{},callDisplay:''// phone number after formatting\n};_this.callConnection=null;_this.callStartTime=null;_this.callNextKeyReset=false;// is user typing a phone number (i.e. no call in progress) or\n// are they using DTMF during a call?\n_this.callTypingPN=true;return _this;}/**\n   * Fetch token from the <tt>getAccessToken</tt> function.\n   * @returns {string}\n   */_createClass(Canvas,[{key:\"componentDidMount\",value:function componentDidMount(){this.initClients();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.state.chatClient){this.state.chatClient.removeAllListeners('channelAdded');this.state.chatClient.removeAllListeners('channelUpdated');}if(this.state.voiceClient){this.state.voiceClient.removeAllListeners('ready');this.state.voiceClient.removeAllListeners('error');}}},{key:\"render\",value:function render(){if(this.state.displayError){return/*#__PURE__*/React.createElement(ViewPort,null,/*#__PURE__*/React.createElement(ModalMessage,{msg:'Error occurred: '+this.state.displayError,img:\"alert\"}));}else if(// if the initial login attempt hasn't bee made yet, don't show anything\n// (to avoid UI redraws with login form flashing brieafly before client load)\nthis.state.authorized===false&&this.state.authCounter===0){return/*#__PURE__*/React.createElement(ViewPort,null);}else if(// if the initial login attempt failed, show a login form\nthis.state.authorized===false&&this.state.authCounter<=maxAuthAttempts){return/*#__PURE__*/React.createElement(ViewPort,null,/*#__PURE__*/React.createElement(AuthForm,{setSecret:this.setSecret,errMsg:this.state.authError}));}else if(// if the max number of attempts was exceeded, show error to discourage\n// repeated logins\nthis.state.authorized===false&&this.state.authCounter>maxAuthAttempts){return/*#__PURE__*/React.createElement(ViewPort,null,/*#__PURE__*/React.createElement(ModalMessage,{msg:\"Authorization failed\",img:\"auth_fail\"}));}else{return/*#__PURE__*/React.createElement(React.StrictMode,null,/*#__PURE__*/React.createElement(ViewPort,null,/*#__PURE__*/React.createElement(ChannelSwitcher,{setChannel:this.setChannel,selectedChannel:this.state.selectedChannel,incomingCall:this.state.incomingCall,msgUnreadsCache:this.state.msgUnreadsCache}),/*#__PURE__*/React.createElement(ChannelContent,{msgUnreadsCache:this.state.msgUnreadsCache,setUnreadsCache:this.setUnreadsCache,setUnreadMsgs:this.setUnreadMsgs,msgCache:this.state.msgCache,msgPgtrCache:this.state.msgPgtrCache,addMsgCachePage:this.addMsgCachePage,setMsgCachePage:this.setMsgCachePage,addMsgCacheMsg:this.addMsgCacheMsg,setCallDisplay:this.setCallDisplay,callDisplay:this.state.callDisplay,setCallConnection:this.setCallConnection,getCallConnection:this.getCallConnection,setCallStartTime:this.setCallStartTime,getCallStartTime:this.getCallStartTime,setCallNextKeyReset:this.setCallNextKeyReset,getCallNextKeyReset:this.getCallNextKeyReset,setCallTypingPN:this.setCallTypingPN,getCallTypingPN:this.getCallTypingPN,selectedChannel:this.state.selectedChannel,secret:this.state.secret,client:this.state.selectedChannel==='sms'?this.state.chatClient:this.state.voiceClient,channelList:this.state.selectedChannel==='sms'?this.state.chatChannelList:null,incomingCall:this.state.incomingCall})));}}}]);return Canvas;}(Component);export{Canvas as default};var ViewPort=styled.div(_templateObject());","map":{"version":3,"sources":["/root/twilio-phone-client/src/components/PhoneClient.js"],"names":["React","Component","styled","update","jwt_decode","formParams","stringify","ChannelSwitcher","ChannelContent","AuthForm","ModalMessage","TwilioChat","require","TwilioVoice","maxAuthAttempts","Canvas","props","_fetchToken","Promise","resolve","reject","accessTokenGenerator","process","env","REACT_APP_RUNTIME_DOMAIN","body","secret","state","fetch","method","headers","then","response","status","text","errText","setState","authorized","authError","authCounter","console","error","token","undefined","catch","err","displayError","setSecret","initClients","setCallDisplay","callDisplay","setCallConnection","callConnection","getCallConnection","setCallStartTime","callStartTime","getCallStartTime","setCallNextKeyReset","callNextKeyReset","getCallNextKeyReset","setCallTypingPN","callTypingPN","getCallTypingPN","setUnreadsCache","contact","unread","msgUnreadsCache","$set","setUnreadMsgs","channel","lastConsumedMessageIndex","getMessagesCount","cnt","getUnconsumedMessagesCount","setMsgCachePage","messages","paginator","msgCache","pgtrCache","msgPgtrCache","addMsgCachePage","$unshift","addMsgCacheMsg","msg","$merge","$push","getToken","decoded_token","s_now","Math","floor","Date","now","s_expire","exp","log","getTokenActive","chatClient","voiceClient","Device","setup","codecPreferences","fakeLocalDTMF","enableRingingState","on","device","code","updateToken","connection","parameters","From","incomingCall","Client","create","getSubscribedChannels","chatChannelList","i","items","length","uniqueName","$unset","updateReasons","includes","setChannel","selectedChannel","localStorage","getItem","removeAllListeners","ViewPort","div"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport update from 'immutability-helper';\nimport jwt_decode from 'jwt-decode';\nimport { formParams, stringify } from '../lib/common';\n\nimport ChannelSwitcher from './ChannelSwitcher';\nimport ChannelContent from './ChannelContent';\nimport AuthForm from './AuthForm';\nimport { ModalMessage } from './CommonComponents';\n\nconst TwilioChat = require('twilio-chat');\nconst TwilioVoice = require('twilio-client');\n\nconst maxAuthAttempts = 3;\n\nexport default class Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedChannel: 'sms',\n      chatClient: null,\n      chatChannelList: null,\n      voiceClient: null,\n      incomingCall: null,\n      token: null,\n      authorized: false,\n      authCounter: 0,\n      authError: '',\n      secret: localStorage.getItem('secret'),\n      displayError: null,\n      msgUnreadsCache: {},\n      msgCache: {},\n      msgPgtrCache: {},\n      callDisplay: '' // phone number after formatting\n    };\n\n    this.callConnection = null;\n    this.callStartTime = null;\n    this.callNextKeyReset = false;\n    // is user typing a phone number (i.e. no call in progress) or\n    // are they using DTMF during a call?\n    this.callTypingPN = true;\n  }\n\n  /**\n   * Fetch token from the <tt>getAccessToken</tt> function.\n   * @returns {string}\n   */\n  _fetchToken = () => {\n    return new Promise((resolve, reject) => {\n      const accessTokenGenerator =\n        (process.env.REACT_APP_RUNTIME_DOMAIN\n          ? process.env.REACT_APP_RUNTIME_DOMAIN\n          : '') + '/getAccessToken';\n\n      const body = formParams({\n        secret: this.state.secret // handle escaping\n      });\n      fetch(accessTokenGenerator, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body\n      })\n        .then(async (response) => {\n          if (response.status === 200) {\n            return response.text();\n          } else if (response.status === 401) {\n            const errText = await response.text();\n            this.setState({\n              authorized: false,\n              authError: this.state.authCounter === 0 ? '' : errText,\n              authCounter: this.state.authCounter + 1\n            });\n            console.error(\n              'Authorization failed - check if SECRET env variable is set correctly:',\n              errText\n            );\n            reject(errText);\n          }\n        })\n        .then((token) => {\n          if (token !== undefined) {\n            this.setState({\n              authorized: true,\n              authError: '',\n              authCounter: 0\n            });\n            resolve(token);\n          }\n        })\n        .catch((err) => {\n          console.error('Error fetching Access Token:', err);\n          this.setState({\n            displayError: `Error fetching Access Token (${stringify(err)})`\n          });\n          reject(err);\n        });\n    });\n  };\n\n  /**\n   * Setters & getters for properties that don't have to be part of the state,\n   * but need to be accessed by child components and need their values to\n   * survive unmounting of the consuming component\n   */\n\n  setSecret = (secret) => {\n    this.setState({ secret }, () => this.initClients());\n  };\n  setCallDisplay = (callDisplay) => {\n    this.setState({ callDisplay });\n  };\n  setCallConnection = (callConnection) => {\n    this.callConnection = callConnection;\n  };\n  getCallConnection = () => {\n    return this.callConnection;\n  };\n  setCallStartTime = (callStartTime) => {\n    this.callStartTime = callStartTime;\n  };\n  getCallStartTime = () => {\n    return this.callStartTime;\n  };\n  setCallNextKeyReset = (callNextKeyReset) => {\n    this.callNextKeyReset = callNextKeyReset;\n  };\n  getCallNextKeyReset = () => {\n    return this.callNextKeyReset;\n  };\n  setCallTypingPN = (callTypingPN) => {\n    this.callTypingPN = callTypingPN;\n  };\n  getCallTypingPN = () => {\n    return this.callTypingPN;\n  };\n\n  /**\n   * msgUnreadsCache setter\n   * @param {*} contact - the contact for which the cache should be updated\n   * @param {*} unread - new value\n   */\n  setUnreadsCache = (contact, unread) => {\n    this.setState({\n      msgUnreadsCache: update(this.state.msgUnreadsCache, {\n        [contact]: { $set: unread }\n      })\n    });\n  };\n\n  setUnreadMsgs = (channel, contact) => {\n    // if there's no consumed messages, all messages are unread\n    // (getUnconsumedMessagesCount doesn't really work in this case\n    // so we need to handle this edge case manually)\n    if (channel.lastConsumedMessageIndex === null) {\n      channel.getMessagesCount().then((cnt) => {\n        this.setState({\n          msgUnreadsCache: update(this.state.msgUnreadsCache, {\n            [contact]: { $set: cnt }\n          })\n        });\n      });\n    } else {\n      channel.getUnconsumedMessagesCount().then((cnt) => {\n        this.setState({\n          msgUnreadsCache: update(this.state.msgUnreadsCache, {\n            [contact]: { $set: cnt }\n          })\n        });\n      });\n    }\n  };\n\n  /**\n   * Initialize message cache for given contact\n   * @param {*} contact\n   * @param {*} messages\n   * @param {*} paginator\n   */\n  setMsgCachePage = (contact, messages, paginator) => {\n    this.setState({\n      msgCache: update(this.state.msgCache, {\n        [contact]: { $set: messages }\n      }),\n      pgtrCache: update(this.state.msgPgtrCache, {\n        [contact]: { $set: paginator }\n      })\n    });\n  };\n\n  /**\n   * Add new page worth of messages using paginator\n   * @param {*} contact\n   * @param {*} messages\n   * @param {*} paginator\n   */\n  addMsgCachePage = (contact, messages, paginator) => {\n    this.setState({\n      msgCache: update(this.state.msgCache, {\n        [contact]: { $unshift: messages }\n      }),\n      pgtrCache: update(this.state.msgPgtrCache, {\n        [contact]: { $set: paginator }\n      })\n    });\n  };\n\n  /**\n   * Add one new message to the cache\n   * @param {*} contact\n   * @param {*} msg\n   */\n  addMsgCacheMsg = (contact, msg) => {\n    if (this.state.msgCache[contact] === undefined) {\n      this.setState({\n        msgCache: update(this.state.msgCache, {\n          $merge: { [contact]: [] }\n        })\n      });\n    }\n    this.setState({\n      msgCache: update(this.state.msgCache, { [contact]: { $push: [msg] } })\n    });\n  };\n\n  /**\n   * Wrapper around _fetchToken that stores the token in component's state\n   * @returns {string}\n   */\n  getToken = () => {\n    return new Promise((resolve, reject) => {\n      if (this.state.token) {\n        const decoded_token = jwt_decode(this.state.token);\n        const s_now = Math.floor(Date.now() / 1000);\n        const s_expire = decoded_token.exp;\n        console.log(`Token is expiring in ${s_expire - s_now}s`);\n        if (s_expire - s_now < 300) {\n          // token is about to expire, let's renew it\n          this._fetchToken().then((token) => {\n            this.setState({ token });\n            this.getTokenActive = false;\n            resolve(token);\n          });\n        } else {\n          this.getTokenActive = false;\n          resolve(this.state.token);\n        }\n      } else {\n        this._fetchToken().then((token) => {\n          this.setState({ token });\n          this.getTokenActive = false;\n          resolve(token);\n        });\n      }\n    });\n  };\n\n  /**\n   * Initialize the Voice and Chat clients\n   * @returns {string}\n   */\n  initClients = () => {\n    if (this.state.chatClient === null && this.state.voiceClient === null) {\n      this.getToken().then((token) => {\n        // initialize Voice client\n        const voiceClient = new TwilioVoice.Device();\n        voiceClient.setup(token, {\n          // Set Opus as our preferred codec. Opus generally performs better,\n          // requiring less bandwidth and providing better audio quality in\n          // restrained network conditions. Opus will be default in 2.0.\n          codecPreferences: ['opus', 'pcmu'],\n          // Use fake DTMF tones client-side. Real tones are still sent to the\n          // other end of the call, but the client-side DTMF tones are fake.\n          // This prevents the local mic capturing the DTMF tone a second time\n          // and sending the tone twice. This will be default in 2.0.\n          fakeLocalDTMF: true,\n          // Use `enableRingingState` to enable the device to emit the `ringing`\n          // state. The TwiML backend also needs to have the attribute\n          // `answerOnBridge` also set to true in the `Dial` verb. This option\n          // changes the behavior of the SDK to consider a call `ringing`\n          // starting from the connection to the TwiML backend to when the\n          // recipient of the `Dial` verb answers.\n          enableRingingState: true\n        });\n        voiceClient.on('ready', (device) => {\n          console.log('voiceClient is ready');\n        });\n        voiceClient.on('error', (error) => {\n          console.log('Twilio.Device Error: ', error);\n          // JWT Token Expired\n          if (error.code === 31205) {\n            this.getToken().then(() => {\n              this.state.chatClient.updateToken(this.state.token);\n              this.state.voiceClient.updateToken(this.state.token);\n              console.log('Token updated after expiration (from voiceClient)');\n            });\n          }\n        });\n        voiceClient.on('incoming', (connection) => {\n          console.log(\n            'PC: INCOMING event fired from ' + connection.parameters.From\n          );\n          this.setState({ incomingCall: connection });\n          this.setCallConnection(connection);\n          connection.on('reject', (connection) => {\n            // when incoming call gets rejected from CallCanvas, update state\n            this.setState({\n              incomingCall: null\n            });\n          });\n        });\n        voiceClient.on('cancel', (connection) => {\n          console.log('PC: CANCEL event fired');\n          this.setState({\n            incomingCall: null\n          });\n        });\n\n        voiceClient.on('connect', (connection) => {\n          console.log('PC: CONNECT event fired');\n          this.setState({ incomingCall: null }); // cleanup the incoming call state and let the component handle this natively\n        });\n\n        voiceClient.on('disconnect', (connection) => {\n          console.log('PC: DISCONNECT event fired');\n          this.setCallDisplay('');\n          this.setCallStartTime(null);\n          this.setCallTypingPN(true);\n          this.setCallNextKeyReset(false);\n        });\n\n        console.log('voiceClient is initialized');\n        this.setState({ voiceClient });\n\n        // initialize Chat client\n        TwilioChat.Client.create(token).then((chatClient) => {\n          this.setState({ chatClient });\n          chatClient.getSubscribedChannels().then((paginator) => {\n            let chatChannelList = {};\n            for (let i = 0; i < paginator.items.length; i++) {\n              const channel = paginator.items[i];\n              chatChannelList[channel.uniqueName] = channel;\n            }\n            console.log('chatClient is initialized');\n\n            this.setState({ chatChannelList });\n          });\n          chatClient.on('channelRemoved', (channel) => {\n            if (this.state.chatChannelList !== null) {\n              this.setState({\n                chatChannelList: update(this.state.chatChannelList, {\n                  $unset: [channel.uniqueName]\n                }),\n                msgUnreadsCache: update(this.state.msgUnreadsCache, {\n                  $unset: [channel.uniqueName]\n                }),\n                msgCache: update(this.state.msgCache, {\n                  $unset: [channel.uniqueName]\n                }),\n                msgPgtrCache: update(this.state.msgPgtrCache, {\n                  $unset: [channel.uniqueName]\n                })\n              });\n            }\n          });\n          chatClient.on('channelAdded', (channel) => {\n            if (this.state.chatChannelList !== null) {\n              this.setState({\n                chatChannelList: update(this.state.chatChannelList, {\n                  $merge: { [channel.uniqueName]: channel }\n                }),\n                msgCache: update(this.state.msgCache, {\n                  [channel.uniqueName]: { $set: undefined }\n                })\n              });\n            }\n          });\n          chatClient.on('channelUpdated', ({ channel, updateReasons }) => {\n            if (\n              this.state.chatChannelList !== null &&\n              updateReasons.includes('lastMessage')\n            ) {\n              this.setState({\n                chatChannelList: update(this.state.chatChannelList, {\n                  [channel.uniqueName]: { $set: channel }\n                })\n              });\n            }\n          });\n          chatClient.on('tokenAboutToExpire', () => {\n            this.getToken().then(() => {\n              this.state.chatClient.updateToken(this.state.token);\n              this.state.voiceClient.updateToken(this.state.token);\n              console.log('Token updated before expiration');\n            });\n          });\n          chatClient.on('tokenExpired', () => {\n            this.getToken().then(() => {\n              this.state.chatClient.updateToken(this.state.token);\n              this.state.voiceClient.updateToken(this.state.token);\n              console.log('Token updated after expiration (from chatClient)');\n            });\n          });\n        });\n      });\n    }\n  };\n\n  setChannel = (selectedChannel) => {\n    this.setState({ selectedChannel });\n  };\n\n  componentDidMount() {\n    this.initClients();\n  }\n\n  componentDidUpdate() {}\n\n  componentWillUnmount() {\n    if (this.state.chatClient) {\n      this.state.chatClient.removeAllListeners('channelAdded');\n      this.state.chatClient.removeAllListeners('channelUpdated');\n    }\n    if (this.state.voiceClient) {\n      this.state.voiceClient.removeAllListeners('ready');\n      this.state.voiceClient.removeAllListeners('error');\n    }\n  }\n\n  render() {\n    if (this.state.displayError) {\n      return (\n        <ViewPort>\n          <ModalMessage\n            msg={'Error occurred: ' + this.state.displayError}\n            img=\"alert\"\n          />\n        </ViewPort>\n      );\n    } else if (\n      // if the initial login attempt hasn't bee made yet, don't show anything\n      // (to avoid UI redraws with login form flashing brieafly before client load)\n      this.state.authorized === false &&\n      this.state.authCounter === 0\n    ) {\n      return <ViewPort></ViewPort>;\n    } else if (\n      // if the initial login attempt failed, show a login form\n      this.state.authorized === false &&\n      this.state.authCounter <= maxAuthAttempts\n    ) {\n      return (\n        <ViewPort>\n          <AuthForm setSecret={this.setSecret} errMsg={this.state.authError} />\n        </ViewPort>\n      );\n    } else if (\n      // if the max number of attempts was exceeded, show error to discourage\n      // repeated logins\n      this.state.authorized === false &&\n      this.state.authCounter > maxAuthAttempts\n    ) {\n      return (\n        <ViewPort>\n          <ModalMessage msg=\"Authorization failed\" img=\"auth_fail\" />\n        </ViewPort>\n      );\n    } else {\n      return (\n        <React.StrictMode>\n          <ViewPort>\n            <ChannelSwitcher\n              setChannel={this.setChannel}\n              selectedChannel={this.state.selectedChannel}\n              incomingCall={this.state.incomingCall}\n              msgUnreadsCache={this.state.msgUnreadsCache}\n            />\n            <ChannelContent\n              msgUnreadsCache={this.state.msgUnreadsCache}\n              setUnreadsCache={this.setUnreadsCache}\n              setUnreadMsgs={this.setUnreadMsgs}\n              msgCache={this.state.msgCache}\n              msgPgtrCache={this.state.msgPgtrCache}\n              addMsgCachePage={this.addMsgCachePage}\n              setMsgCachePage={this.setMsgCachePage}\n              addMsgCacheMsg={this.addMsgCacheMsg}\n              setCallDisplay={this.setCallDisplay}\n              callDisplay={this.state.callDisplay}\n              setCallConnection={this.setCallConnection}\n              getCallConnection={this.getCallConnection}\n              setCallStartTime={this.setCallStartTime}\n              getCallStartTime={this.getCallStartTime}\n              setCallNextKeyReset={this.setCallNextKeyReset}\n              getCallNextKeyReset={this.getCallNextKeyReset}\n              setCallTypingPN={this.setCallTypingPN}\n              getCallTypingPN={this.getCallTypingPN}\n              selectedChannel={this.state.selectedChannel}\n              secret={this.state.secret}\n              client={\n                this.state.selectedChannel === 'sms'\n                  ? this.state.chatClient\n                  : this.state.voiceClient\n              }\n              channelList={\n                this.state.selectedChannel === 'sms'\n                  ? this.state.chatChannelList\n                  : null\n              }\n              incomingCall={this.state.incomingCall}\n            />\n          </ViewPort>\n        </React.StrictMode>\n      );\n    }\n  }\n}\n\nconst ViewPort = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: stretch;\n  max-width: 400px;\n`;\n"]},"metadata":{},"sourceType":"module"}