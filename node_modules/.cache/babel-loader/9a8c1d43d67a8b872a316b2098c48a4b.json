{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @internalapi\n */\n\nvar events_1 = require(\"events\");\n\nvar connection_1 = require(\"./twilio/connection\");\n\nexports.Connection = connection_1.default;\n\nvar device_1 = require(\"./twilio/device\");\n\nexports.Device = device_1.default;\n\nvar preflight_1 = require(\"./twilio/preflight/preflight\");\n\nexports.PreflightTest = preflight_1.PreflightTest;\n\nvar PStream = require('./twilio/pstream');\n\nexports.PStream = PStream;\nvar instance;\nObject.defineProperty(device_1.default, 'instance', {\n  get: function () {\n    return instance;\n  },\n  set: function (_instance) {\n    if (_instance === null) {\n      instance = null;\n    }\n  }\n});\n\ndevice_1.default.destroy = function destroySingleton() {\n  if (instance) {\n    instance.destroy();\n  }\n\n  bindSingleton();\n};\n/**\n * Create a new Device instance and bind its functions to the Device static. This maintains\n * backwards compatibility for the Device singleton behavior and will be removed in the next\n * breaking release.\n */\n\n\nfunction bindSingleton() {\n  instance = new device_1.default();\n  Object.getOwnPropertyNames(device_1.default.prototype).concat(Object.getOwnPropertyNames(events_1.EventEmitter.prototype)).filter(function (prop) {\n    return typeof device_1.default.prototype[prop] === 'function';\n  }).filter(function (prop) {\n    return prop !== 'destroy';\n  }).forEach(function (prop) {\n    device_1.default[prop] = device_1.default.prototype[prop].bind(instance);\n  });\n}\n\nbindSingleton();\nObject.getOwnPropertyNames(instance).filter(function (prop) {\n  return typeof device_1.default.prototype[prop] !== 'function';\n}).forEach(function (prop) {\n  Object.defineProperty(device_1.default, prop, {\n    get: function () {\n      if (instance) {\n        return instance[prop];\n      }\n    },\n    set: function (_prop) {\n      if (instance) {\n        instance[prop] = _prop;\n      }\n    }\n  });\n});","map":{"version":3,"sources":["../lib/twilio.ts"],"names":[],"mappings":";;;;;AAAA;;;AAGG;;AACH,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AA6DS,OAAA,CAAA,UAAA,GA7DF,YAAA,CAAA,OA6DE;;AA5DT,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AA4DqB,OAAA,CAAA,MAAA,GA5Dd,QAAA,CAAA,OA4Dc;;AA3DrB,IAAA,WAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AA2D6B,OAAA,CAAA,aAAA,GA3DpB,WAAA,CAAA,aA2DoB;;AAzD7B,IAAM,OAAO,GAAG,OAAO,CAAC,kBAAD,CAAvB;;AAyD4C,OAAA,CAAA,OAAA,GAAA,OAAA;AAvD5C,IAAI,QAAJ;AACA,MAAM,CAAC,cAAP,CAAsB,QAAA,CAAA,OAAtB,EAA8B,UAA9B,EAA0C;AACxC,EAAA,GAAG,EAAE,YAAA;AAAM,WAAA,QAAA;AAAQ,GADqB;AAExC,EAAA,GAAG,EAAE,UAAC,SAAD,EAAU;AACb,QAAI,SAAS,KAAK,IAAlB,EAAwB;AACtB,MAAA,QAAQ,GAAG,IAAX;AACD;AACF;AANuC,CAA1C;;AASC,QAAA,CAAA,OAAA,CAAe,OAAf,GAAyB,SAAS,gBAAT,GAAyB;AACjD,MAAI,QAAJ,EAAc;AACZ,IAAA,QAAQ,CAAC,OAAT;AACD;;AACD,EAAA,aAAa;AACd,CALA;AAOD;;;;AAIG;;;AACH,SAAS,aAAT,GAAsB;AACpB,EAAA,QAAQ,GAAG,IAAI,QAAA,CAAA,OAAJ,EAAX;AAEA,EAAA,MAAM,CAAC,mBAAP,CAA2B,QAAA,CAAA,OAAA,CAAO,SAAlC,EACG,MADH,CACU,MAAM,CAAC,mBAAP,CAA2B,QAAA,CAAA,YAAA,CAAa,SAAxC,CADV,EAEG,MAFH,CAEU,UAAC,IAAD,EAAmB;AACzB,WAAO,OAAO,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,IAAjB,CAAP,KAAkC,UAAzC;AACD,GAJH,EAKG,MALH,CAKU,UAAA,IAAA,EAAI;AAAI,WAAA,IAAI,KAAJ,SAAA;AAAkB,GALpC,EAMG,OANH,CAMW,UAAA,IAAA,EAAI;AACV,IAAA,QAAA,CAAA,OAAA,CAAe,IAAf,IAAwB,QAAA,CAAA,OAAA,CAAO,SAAP,CAAyB,IAAzB,EAA+B,IAA/B,CAAoC,QAApC,CAAxB;AACF,GARH;AASD;;AAED,aAAa;AAEb,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EACG,MADH,CACU,UAAC,IAAD,EAAmB;AAAK,SAAA,OAAO,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,IAAjB,CAAP,KAAA,UAAA;AAA4C,CAD9E,EAEG,OAFH,CAEW,UAAC,IAAD,EAAmB;AAC1B,EAAA,MAAM,CAAC,cAAP,CAAsB,QAAA,CAAA,OAAtB,EAA8B,IAA9B,EAAoC;AAClC,IAAA,GAAG,EAAE,YAAA;AACH,UAAI,QAAJ,EAAc;AACZ,eAAO,QAAQ,CAAC,IAAD,CAAf;AACD;AACF,KALiC;AAMlC,IAAA,GAAG,EAAE,UAAC,KAAD,EAAM;AACT,UAAI,QAAJ,EAAc;AACX,QAAA,QAAgB,CAAC,IAAD,CAAhB,GAAyB,KAAzB;AACF;AACF;AAViC,GAApC;AAYD,CAfH","sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\nimport { EventEmitter } from 'events';\nimport Connection from './twilio/connection';\nimport Device from './twilio/device';\nimport { PreflightTest } from './twilio/preflight/preflight' ;\n\nconst PStream = require('./twilio/pstream');\n\nlet instance: Device | null | undefined;\nObject.defineProperty(Device, 'instance', {\n  get: () => instance,\n  set: (_instance) => {\n    if (_instance === null) {\n      instance = null;\n    }\n  },\n});\n\n(Device as any).destroy = function destroySingleton() {\n  if (instance) {\n    instance.destroy();\n  }\n  bindSingleton();\n};\n\n/**\n * Create a new Device instance and bind its functions to the Device static. This maintains\n * backwards compatibility for the Device singleton behavior and will be removed in the next\n * breaking release.\n */\nfunction bindSingleton() {\n  instance = new Device();\n\n  Object.getOwnPropertyNames(Device.prototype)\n    .concat(Object.getOwnPropertyNames(EventEmitter.prototype))\n    .filter((prop: keyof Device) => {\n      return typeof Device.prototype[prop] === 'function';\n    })\n    .filter(prop => prop !== 'destroy')\n    .forEach(prop => {\n      (Device as any)[prop] = (Device.prototype as any)[prop].bind(instance);\n    });\n}\n\nbindSingleton();\n\nObject.getOwnPropertyNames(instance)\n  .filter((prop: keyof Device) => typeof Device.prototype[prop] !== 'function')\n  .forEach((prop: keyof Device) => {\n    Object.defineProperty(Device, prop, {\n      get: () => {\n        if (instance) {\n          return instance[prop];\n        }\n      },\n      set: (_prop) => {\n        if (instance) {\n          (instance as any)[prop] = _prop;\n        }\n      },\n    });\n  });\n\nexport { Connection, Device, PreflightTest, PStream };\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}