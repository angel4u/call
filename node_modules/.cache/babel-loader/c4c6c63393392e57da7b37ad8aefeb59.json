{"ast":null,"code":"'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\n\nfunction request(method, params, callback) {\n  var options = {};\n  options.XMLHttpRequest = options.XMLHttpRequest || XHR;\n  var xhr = new options.XMLHttpRequest();\n  xhr.open(method, params.url, true);\n\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (200 <= xhr.status && xhr.status < 300) {\n      callback(null, xhr.responseText);\n      return;\n    }\n\n    callback(new Error(xhr.responseText));\n  };\n\n  for (var headerName in params.headers) {\n    xhr.setRequestHeader(headerName, params.headers[headerName]);\n  }\n\n  xhr.send(JSON.stringify(params.body));\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n **/\n\n\nvar Request = request;\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\n\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\n\n\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\n\nmodule.exports = Request;","map":{"version":3,"sources":["/root/twilio-phone-client/node_modules/twilio-client/es5/twilio/request.js"],"names":["XHR","require","XMLHttpRequest","request","method","params","callback","options","xhr","open","url","onreadystatechange","readyState","status","responseText","Error","headerName","headers","setRequestHeader","send","JSON","stringify","body","Request","get","post","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,cAApC;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AACzC,MAAIC,OAAO,GAAG,EAAd;AACAA,EAAAA,OAAO,CAACL,cAAR,GAAyBK,OAAO,CAACL,cAAR,IAA0BF,GAAnD;AACA,MAAIQ,GAAG,GAAG,IAAID,OAAO,CAACL,cAAZ,EAAV;AAEAM,EAAAA,GAAG,CAACC,IAAJ,CAASL,MAAT,EAAiBC,MAAM,CAACK,GAAxB,EAA6B,IAA7B;;AACAF,EAAAA,GAAG,CAACG,kBAAJ,GAAyB,SAASA,kBAAT,GAA8B;AACrD,QAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,QAAI,OAAOJ,GAAG,CAACK,MAAX,IAAqBL,GAAG,CAACK,MAAJ,GAAa,GAAtC,EAA2C;AACzCP,MAAAA,QAAQ,CAAC,IAAD,EAAOE,GAAG,CAACM,YAAX,CAAR;AACA;AACD;;AAEDR,IAAAA,QAAQ,CAAC,IAAIS,KAAJ,CAAUP,GAAG,CAACM,YAAd,CAAD,CAAR;AACD,GAXD;;AAaA,OAAK,IAAIE,UAAT,IAAuBX,MAAM,CAACY,OAA9B,EAAuC;AACrCT,IAAAA,GAAG,CAACU,gBAAJ,CAAqBF,UAArB,EAAiCX,MAAM,CAACY,OAAP,CAAeD,UAAf,CAAjC;AACD;;AAEDR,EAAAA,GAAG,CAACW,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAehB,MAAM,CAACiB,IAAtB,CAAT;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,OAAO,GAAGpB,OAAd;AAEA;AACA;AACA;AACA;AACA;;AACAoB,OAAO,CAACC,GAAR,GAAc,SAASA,GAAT,CAAanB,MAAb,EAAqBC,QAArB,EAA+B;AAC3C,SAAO,IAAI,IAAJ,CAAS,KAAT,EAAgBD,MAAhB,EAAwBC,QAAxB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAiB,OAAO,CAACE,IAAR,GAAe,SAASA,IAAT,CAAcpB,MAAd,EAAsBC,QAAtB,EAAgC;AAC7C,SAAO,IAAI,IAAJ,CAAS,MAAT,EAAiBD,MAAjB,EAAyBC,QAAzB,CAAP;AACD,CAFD;;AAIAoB,MAAM,CAACC,OAAP,GAAiBJ,OAAjB","sourcesContent":["'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\n\nfunction request(method, params, callback) {\n  var options = {};\n  options.XMLHttpRequest = options.XMLHttpRequest || XHR;\n  var xhr = new options.XMLHttpRequest();\n\n  xhr.open(method, params.url, true);\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (200 <= xhr.status && xhr.status < 300) {\n      callback(null, xhr.responseText);\n      return;\n    }\n\n    callback(new Error(xhr.responseText));\n  };\n\n  for (var headerName in params.headers) {\n    xhr.setRequestHeader(headerName, params.headers[headerName]);\n  }\n\n  xhr.send(JSON.stringify(params.body));\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n **/\nvar Request = request;\n\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\n\nmodule.exports = Request;"]},"metadata":{},"sourceType":"script"}