{"ast":null,"code":"import _taggedTemplateLiteral from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _defineProperty from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/root/twilio-phone-client/node_modules/@babel/runtime/helpers/esm/createSuper\";function _templateObject6(){var data=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: auto auto;\\n  position: relative;\\n  width: 80vmin;\\n  margin-top: 83vmin;\\n  justify-items: center;\\n  @media (min-width: 400px) {\\n    width: 320px;\\n    margin-top: 332px;\\n  }\\n\"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=_taggedTemplateLiteral([\"\\n  outline: none;\\n  height: 10vmin;\\n  width: 66vmin;\\n  font-size: 8vmin;\\n  text-align: center;\\n  padding: 1vmin 3vmin 0.5vmin 3vmin;\\n  @media (min-width: 400px) {\\n    height: 40px;\\n    width: 264px;\\n    font-size: 32px;\\n    padding: 4px 12px 2px 12px;\\n  }\\n  border: 0;\\n  &:focus {\\n    outline: none;\\n  }\\n\"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n  outline: none;\\n  margin-top: 10vmin;\\n  border-radius: 10px;\\n  height: 6vmin;\\n  width: 66vmin;\\n  font-size: 4vmin;\\n  text-align: center;\\n  padding: 20vmin 3vmin 0.5vmin 3vmin;\\n  @media (min-width: 400px) {\\n    margin-top: 40px;\\n    height: 24px;\\n    width: 264px;\\n    font-size: 16px;\\n    padding: 80px 12px 2px 12px;\\n  }\\n  border: 0;\\n  &:focus {\\n    outline: none;\\n  }\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  outline: none;\\n  margin-top: 10vmin;\\n  border-radius: 10px;\\n  height: 10vmin;\\n  width: 66vmin;\\n  font-size: 8vmin;\\n  text-align: center;\\n  padding: 0.5vmin 3vmin 0.5vmin 3vmin;\\n  @media (min-width: 400px) {\\n    margin-top: 40px;\\n    height: 40px;\\n    width: 264px;\\n    font-size: 32px;\\n    padding: 2px 12px 2px 12px;\\n  }\\n  border: 0;\\n  background: #e8e8e8;\\n  color: transparent;\\n  text-shadow: 0 0 0 #222222;\\n  &:focus {\\n    outline: none;\\n  }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: nowrap;\\n  align-items: center;\\n  height: 100vh;\\n  max-width: 440px;\\n  position: relative;\\n  overflow-x: hidden;\\n\\n  padding-left: 12px;\\n  padding-right: 12px;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  font-size: 4vmin;\\n  height: 4vmin;\\n  padding: 2vmin;\\n  @media (min-width: 400px) {\\n    font-size: 16px;\\n    height: 16px;\\n    padding: 8px;\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{Component}from'react';import update from'immutability-helper';import styled from'styled-components';import{BtnDialRed,BtnDialGreen,DialRed,DialGreen}from'./CallDialpadComponents';import{ModalMessage}from'./CommonComponents';import{AsYouType}from'libphonenumber-js';import CallDialpad from'./CallDialpad';var CanvasMsg=/*#__PURE__*/function(_Component){_inherits(CanvasMsg,_Component);var _super=_createSuper(CanvasMsg);function CanvasMsg(props){var _this;_classCallCheck(this,CanvasMsg);_this=_super.call(this,props);_this.connectCall=function(){if(_this.props.client.status()!=='ready'){console.error('Client is not ready ('+_this.props.client.status()+')');return;}console.log('Dialing',_this.props.callDisplay);_this.props.setCallConnection(_this.props.client.connect({number:_this.props.callDisplay}));_this.props.getCallConnection().on('mute',function(isMuted){_this.setState({isMuted:isMuted});});_this.props.setCallTypingPN(false);_this.props.setCallNextKeyReset(true);_this.props.setCallStartTime(new Date());_this.timer=setTimeout(_this.tick,1000);};_this.tick=function(){var now=new Date();_this.setState({elapsedTime:now-_this.props.getCallStartTime()});_this.timer=setTimeout(_this.tick,1000-now%1000);};_this.hangupCall=function(){_this.props.client.disconnectAll();};_this.wrapupCall=function(){clearTimeout(_this.timer);_this.setState({elapsedTime:null,isMuted:false});// Destroy any pending connection listeners\nif(_this.props.getCallConnection()){_this.props.getCallConnection().removeAllListeners('mute');}};_this.toggleMute=function(){_this.props.getCallConnection().mute(!_this.props.getCallConnection().isMuted());};_this.dialPressed=function(dial){var _display=_this.props.callDisplay;// reset display (e.g. after call is placed)\nif(_this.props.getCallNextKeyReset()&&dial.match(/^[0-9+#*]$/)){_this.props.setCallDisplay('');_display='';_this.props.setCallNextKeyReset(false);}if(dial.match(/^[0-9#*]$/)){_this.updateDisplay(_display+dial);}else if(dial==='Backspace'){if(_display.charAt(_display.length-1)===')'){_this.updateDisplay(_display.substr(0,_display.length-2));}else{_this.updateDisplay(_display.substr(0,_display.length-1));}}else if(dial==='+'){if(_display===''){_this.updateDisplay('+');}}_this.numberInputRef.current.focus();_this.runPressEvents(dial);};_this.dialFakeReset=function(dial){if(_this.state.dialActive[dial]!==undefined){_this.setState({dialActive:update(_this.state.dialActive,_defineProperty({},dial,{$set:false}))});}};_this.dialFakePressed=function(dial){if(_this.state.dialActive[dial]!==undefined){_this.setState({dialActive:update(_this.state.dialActive,_defineProperty({},dial,{$set:true}))});}_this.runPressEvents(dial);// sometimes if multiple keys are pressed simultaneously, keyUp event doesn't fire so clean by timeout\nsetTimeout(_this.dialFakeReset.bind(null,dial),300);};_this.handleKeyUp=function(e){_this.dialFakeReset(e.key);};_this.handleKeyDown=function(e){// handle edge-case when backspace is pressed right after ')' (which would delete that char, but not the digit before it)\nif(e.key==='Backspace'&&e.target.value.charAt(e.target.selectionStart-1)===')'){var _display=_this.props.callDisplay;_display=_display.substr(0,_display.length-1);_this.props.setCallDisplay(_display);}if(e.ctrlKey||e.metaKey||e.altKey)return;var allowedKeys=['+','0','1','2','3','4','5','6','7','8','9','*','#','Backspace','Enter'];if(!allowedKeys.includes(e.key)){e.preventDefault();e.stopPropagation();}else{// reset display (e.g. after call is placed)\nif(_this.props.getCallNextKeyReset()){_this.props.setCallDisplay('');_this.props.setCallNextKeyReset(false);}// simulate events as if a real dial was pressed\n_this.dialFakePressed(e.key);}};_this.handleChange=function(e){_this.updateDisplay(e.target.value);};_this.formatNumber=function(number){_this.asYouType.reset();var result=_this.asYouType.input(number);return result===''?number:result;};_this.updateDisplay=function(newValue){if(_this.props.getCallTypingPN()===true){_this.asYouType.reset();var result=_this.asYouType.input(newValue);if(result!==''){_this.props.setCallDisplay(result);}else{_this.props.setCallDisplay(newValue);}}else{_this.props.setCallDisplay(newValue);}};_this.focusDisplay=function(){if(_this.numberInputRef.current){_this.numberInputRef.current.focus();}};_this.bindListeners=function(){if(_this.props.client&&!_this.handlersSet){/*this.props.client.on('connect', (conn) => {\n        console.log('CC: CONNECT event fired');\n      });*/_this.props.client.on('disconnect',_this.disconnectHandler);// if there's an active connection already in place\n// (i.e. switching from SMS canvas after placing a call)\nif(_this.props.getCallConnection()&&_this.props.getCallConnection().status()!=='closed'){// re-set mute event listener\n_this.props.getCallConnection().on('mute',function(isMuted){_this.setState({isMuted:isMuted});});// and update mute button's state\n_this.setState({isMuted:_this.props.getCallConnection().isMuted()});// re-set elapsed time timer\n_this.timer=setTimeout(_this.tick,1000);// and update current elapsed time\nvar now=new Date();_this.setState({elapsedTime:now-_this.props.getCallStartTime()});}_this.handlersSet=true;}};_this.acceptIncomingCall=function(conn){if(conn){conn.accept();_this.updateDisplay(conn.parameters.From);_this.props.setCallTypingPN(false);_this.props.setCallNextKeyReset(true);_this.props.setCallStartTime(new Date());_this.timer=setTimeout(_this.tick,1000);_this.props.getCallConnection().on('mute',function(isMuted){_this.setState({isMuted:isMuted});});}else{console.error('No incoming connection found');}};_this.rejectIncomingCall=function(conn){if(conn){conn.reject();}else{console.error('No incoming connection found');}};_this.asYouType=new AsYouType('US');_this.timer=null;var dialActive={};['0','1','2','3','4','5','6','7','8','9','*','#','Backspace','Enter'].forEach(function(key){dialActive[key]=false;});_this.state={elapsedTime:null,dialActive:dialActive,isMuted:false,incomingRing:false,incomingConnection:null};_this.numberInputRef=React.createRef();_this.disconnectHandler=function(connection){console.log('CC: DISCONNECT event fired');_this.wrapupCall();};_this.handlersSet=false;_this.theme={color:'#222222',colorToggled:'#FFFFFF',dial:'#E8E8E8',dialActive:'#94979B',dialToggled:'#6f7174',dialGreen:'#36D576',dialGreenActive:'#289f58',dialRed:'#F22F46',dialRedActive:'#B52334'};return _this;}_createClass(CanvasMsg,[{key:\"runPressEvents\",value:function runPressEvents(digit){if(digit==='Enter'){this.connectCall();}else if(digit==='Backspace'){return;}else if(digit==='Hangup'){this.hangupCall();}else if(digit==='ToggleMute'){this.toggleMute();}else{// send DTMF\nif(this.props.client.activeConnection()&&'0123456789#*'.includes(digit)){this.props.client.activeConnection().sendDigits(digit);}}}/**\n   * Outbound call\n   */},{key:\"showTime\",value:function showTime(milis){var date=new Date(null);date.setMilliseconds(milis);if(milis){return(date.getUTCHours()>0?date.getUTCHours()+':':'')+date.toISOString().substr(14,5);}else{return'';}}},{key:\"moveCaretToEnd\",value:function moveCaretToEnd(e){e.target.selectionStart=e.target.value.length;e.target.selectionEnd=e.target.value.length;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){//this.props.client.removeAllListeners('incoming');\n//this.props.client.removeAllListeners('connect');\n//this.props.client.removeAllListeners('ready');\nthis.props.client.removeListener('disconnect',this.disconnectHandler);if(this.props.getCallConnection()){this.props.getCallConnection().removeAllListeners('mute');}clearTimeout(this.timer);}},{key:\"componentDidMount\",value:function componentDidMount(){this.bindListeners();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){this.bindListeners();/*if (\n      this.props.client &&\n      this.props.client.status() !== prevState.clientStatus\n    ) {\n      this.setState({ clientStatus: this.props.client.status() });\n    }*/this.focusDisplay();}},{key:\"render\",value:function render(){if(!this.props.client||this.props.client.status()==='offline'){return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(ModalMessage,{msg:\"Voice client is offline\",img:\"offline\"}));}else if(this.props.incomingCall!==null){return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(Label1,null,\"Incoming call from\"),/*#__PURE__*/React.createElement(Label2,null,this.formatNumber(this.props.incomingCall.parameters.From)),/*#__PURE__*/React.createElement(IncomingDials,null,/*#__PURE__*/React.createElement(BtnDialRed,{theme:this.theme,key:\"RedDial\",onClick:this.rejectIncomingCall.bind(null,this.props.incomingCall)},/*#__PURE__*/React.createElement(DialRed,null)),/*#__PURE__*/React.createElement(BtnDialGreen,{theme:this.theme,key:\"GreenDial\",onClick:this.acceptIncomingCall.bind(null,this.props.incomingCall)},/*#__PURE__*/React.createElement(DialGreen,null))));}else{return/*#__PURE__*/React.createElement(Canvas,null,/*#__PURE__*/React.createElement(Display,{value:this.props.callDisplay,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onChange:this.handleChange,onFocus:this.moveCaretToEnd,onClick:this.moveCaretToEnd,onBlur:this.focusDisplay,ref:this.numberInputRef}),/*#__PURE__*/React.createElement(Timer,{time:this.showTime(this.state.elapsedTime)}),/*#__PURE__*/React.createElement(CallDialpad,{dialPressed:this.dialPressed,dialActive:this.state.dialActive,theme:this.theme,callActive:this.props.client.activeConnection()!==undefined,muted:this.state.isMuted}));}}}]);return CanvasMsg;}(Component);export{CanvasMsg as default};var TimerDisplay=styled.div(_templateObject());function Timer(props){return/*#__PURE__*/React.createElement(TimerDisplay,null,props.time);}var Canvas=styled.div(_templateObject2());var Display=styled.input(_templateObject3());var Label1=styled.div(_templateObject4());var Label2=styled.div(_templateObject5());var IncomingDials=styled.div(_templateObject6());","map":{"version":3,"sources":["/root/twilio-phone-client/src/components/CallCanvas.js"],"names":["React","Component","update","styled","BtnDialRed","BtnDialGreen","DialRed","DialGreen","ModalMessage","AsYouType","CallDialpad","CanvasMsg","props","connectCall","client","status","console","error","log","callDisplay","setCallConnection","connect","number","getCallConnection","on","isMuted","setState","setCallTypingPN","setCallNextKeyReset","setCallStartTime","Date","timer","setTimeout","tick","now","elapsedTime","getCallStartTime","hangupCall","disconnectAll","wrapupCall","clearTimeout","removeAllListeners","toggleMute","mute","dialPressed","dial","_display","getCallNextKeyReset","match","setCallDisplay","updateDisplay","charAt","length","substr","numberInputRef","current","focus","runPressEvents","dialFakeReset","state","dialActive","undefined","$set","dialFakePressed","bind","handleKeyUp","e","key","handleKeyDown","target","value","selectionStart","ctrlKey","metaKey","altKey","allowedKeys","includes","preventDefault","stopPropagation","handleChange","formatNumber","asYouType","reset","result","input","newValue","getCallTypingPN","focusDisplay","bindListeners","handlersSet","disconnectHandler","acceptIncomingCall","conn","accept","parameters","From","rejectIncomingCall","reject","forEach","incomingRing","incomingConnection","createRef","connection","theme","color","colorToggled","dialToggled","dialGreen","dialGreenActive","dialRed","dialRedActive","digit","activeConnection","sendDigits","milis","date","setMilliseconds","getUTCHours","toISOString","selectionEnd","removeListener","prevProps","prevState","incomingCall","moveCaretToEnd","showTime","TimerDisplay","div","Timer","time","Canvas","Display","Label1","Label2","IncomingDials"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport styled from 'styled-components';\nimport {\n  BtnDialRed,\n  BtnDialGreen,\n  DialRed,\n  DialGreen\n} from './CallDialpadComponents';\nimport { ModalMessage } from './CommonComponents';\n\nimport { AsYouType } from 'libphonenumber-js';\n\nimport CallDialpad from './CallDialpad';\n\nexport default class CanvasMsg extends Component {\n  constructor(props) {\n    super(props);\n    this.asYouType = new AsYouType('US');\n    this.timer = null;\n\n    let dialActive = {};\n    [\n      '0',\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      '*',\n      '#',\n      'Backspace',\n      'Enter'\n    ].forEach((key) => {\n      dialActive[key] = false;\n    });\n\n    this.state = {\n      elapsedTime: null,\n      dialActive,\n      isMuted: false,\n      incomingRing: false,\n      incomingConnection: null\n    };\n\n    this.numberInputRef = React.createRef();\n    this.disconnectHandler = (connection) => {\n      console.log('CC: DISCONNECT event fired');\n      this.wrapupCall();\n    };\n    this.handlersSet = false;\n\n    this.theme = {\n      color: '#222222',\n      colorToggled: '#FFFFFF',\n      dial: '#E8E8E8',\n      dialActive: '#94979B',\n      dialToggled: '#6f7174',\n      dialGreen: '#36D576',\n      dialGreenActive: '#289f58',\n      dialRed: '#F22F46',\n      dialRedActive: '#B52334'\n    };\n  }\n\n  runPressEvents(digit) {\n    if (digit === 'Enter') {\n      this.connectCall();\n    } else if (digit === 'Backspace') {\n      return;\n    } else if (digit === 'Hangup') {\n      this.hangupCall();\n    } else if (digit === 'ToggleMute') {\n      this.toggleMute();\n    } else {\n      // send DTMF\n      if (\n        this.props.client.activeConnection() &&\n        '0123456789#*'.includes(digit)\n      ) {\n        this.props.client.activeConnection().sendDigits(digit);\n      }\n    }\n  }\n\n  /**\n   * Outbound call\n   */\n  connectCall = () => {\n    if (this.props.client.status() !== 'ready') {\n      console.error('Client is not ready (' + this.props.client.status() + ')');\n      return;\n    }\n    console.log('Dialing', this.props.callDisplay);\n    this.props.setCallConnection(\n      this.props.client.connect({\n        number: this.props.callDisplay\n      })\n    );\n    this.props.getCallConnection().on('mute', (isMuted) => {\n      this.setState({ isMuted });\n    });\n    this.props.setCallTypingPN(false);\n    this.props.setCallNextKeyReset(true);\n    this.props.setCallStartTime(new Date());\n    this.timer = setTimeout(this.tick, 1000);\n  };\n\n  tick = () => {\n    const now = new Date();\n    this.setState({ elapsedTime: now - this.props.getCallStartTime() });\n    this.timer = setTimeout(this.tick, 1000 - (now % 1000));\n  };\n\n  showTime(milis) {\n    const date = new Date(null);\n    date.setMilliseconds(milis);\n    if (milis) {\n      return (\n        (date.getUTCHours() > 0 ? date.getUTCHours() + ':' : '') +\n        date.toISOString().substr(14, 5)\n      );\n    } else {\n      return '';\n    }\n  }\n\n  hangupCall = () => {\n    this.props.client.disconnectAll();\n  };\n\n  /**\n   * Cleanup after a call has ended\n   */\n  wrapupCall = () => {\n    clearTimeout(this.timer);\n    this.setState({ elapsedTime: null, isMuted: false });\n    // Destroy any pending connection listeners\n    if (this.props.getCallConnection()) {\n      this.props.getCallConnection().removeAllListeners('mute');\n    }\n  };\n\n  toggleMute = () => {\n    this.props\n      .getCallConnection()\n      .mute(!this.props.getCallConnection().isMuted());\n  };\n\n  dialPressed = (dial) => {\n    let _display = this.props.callDisplay;\n    // reset display (e.g. after call is placed)\n    if (this.props.getCallNextKeyReset() && dial.match(/^[0-9+#*]$/)) {\n      this.props.setCallDisplay('');\n      _display = '';\n      this.props.setCallNextKeyReset(false);\n    }\n    if (dial.match(/^[0-9#*]$/)) {\n      this.updateDisplay(_display + dial);\n    } else if (dial === 'Backspace') {\n      if (_display.charAt(_display.length - 1) === ')') {\n        this.updateDisplay(_display.substr(0, _display.length - 2));\n      } else {\n        this.updateDisplay(_display.substr(0, _display.length - 1));\n      }\n    } else if (dial === '+') {\n      if (_display === '') {\n        this.updateDisplay('+');\n      }\n    }\n    this.numberInputRef.current.focus();\n    this.runPressEvents(dial);\n  };\n\n  dialFakeReset = (dial) => {\n    if (this.state.dialActive[dial] !== undefined) {\n      this.setState({\n        dialActive: update(this.state.dialActive, { [dial]: { $set: false } })\n      });\n    }\n  };\n\n  dialFakePressed = (dial) => {\n    if (this.state.dialActive[dial] !== undefined) {\n      this.setState({\n        dialActive: update(this.state.dialActive, { [dial]: { $set: true } })\n      });\n    }\n    this.runPressEvents(dial);\n    // sometimes if multiple keys are pressed simultaneously, keyUp event doesn't fire so clean by timeout\n    setTimeout(this.dialFakeReset.bind(null, dial), 300);\n  };\n\n  handleKeyUp = (e) => {\n    this.dialFakeReset(e.key);\n  };\n\n  handleKeyDown = (e) => {\n    // handle edge-case when backspace is pressed right after ')' (which would delete that char, but not the digit before it)\n    if (\n      e.key === 'Backspace' &&\n      e.target.value.charAt(e.target.selectionStart - 1) === ')'\n    ) {\n      let _display = this.props.callDisplay;\n      _display = _display.substr(0, _display.length - 1);\n      this.props.setCallDisplay(_display);\n    }\n    if (e.ctrlKey || e.metaKey || e.altKey) return;\n    const allowedKeys = [\n      '+',\n      '0',\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      '*',\n      '#',\n      'Backspace',\n      'Enter'\n    ];\n    if (!allowedKeys.includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    } else {\n      // reset display (e.g. after call is placed)\n      if (this.props.getCallNextKeyReset()) {\n        this.props.setCallDisplay('');\n        this.props.setCallNextKeyReset(false);\n      }\n      // simulate events as if a real dial was pressed\n      this.dialFakePressed(e.key);\n    }\n  };\n\n  handleChange = (e) => {\n    this.updateDisplay(e.target.value);\n  };\n\n  moveCaretToEnd(e) {\n    e.target.selectionStart = e.target.value.length;\n    e.target.selectionEnd = e.target.value.length;\n  }\n\n  formatNumber = (number) => {\n    this.asYouType.reset();\n    const result = this.asYouType.input(number);\n    return result === '' ? number : result;\n  };\n\n  updateDisplay = (newValue) => {\n    if (this.props.getCallTypingPN() === true) {\n      this.asYouType.reset();\n      const result = this.asYouType.input(newValue);\n      if (result !== '') {\n        this.props.setCallDisplay(result);\n      } else {\n        this.props.setCallDisplay(newValue);\n      }\n    } else {\n      this.props.setCallDisplay(newValue);\n    }\n  };\n\n  focusDisplay = () => {\n    if (this.numberInputRef.current) {\n      this.numberInputRef.current.focus();\n    }\n  };\n\n  componentWillUnmount() {\n    //this.props.client.removeAllListeners('incoming');\n    //this.props.client.removeAllListeners('connect');\n    //this.props.client.removeAllListeners('ready');\n    this.props.client.removeListener('disconnect', this.disconnectHandler);\n    if (this.props.getCallConnection()) {\n      this.props.getCallConnection().removeAllListeners('mute');\n    }\n    clearTimeout(this.timer);\n  }\n\n  bindListeners = () => {\n    if (this.props.client && !this.handlersSet) {\n      /*this.props.client.on('connect', (conn) => {\n        console.log('CC: CONNECT event fired');\n      });*/\n\n      this.props.client.on('disconnect', this.disconnectHandler);\n\n      // if there's an active connection already in place\n      // (i.e. switching from SMS canvas after placing a call)\n      if (\n        this.props.getCallConnection() &&\n        this.props.getCallConnection().status() !== 'closed'\n      ) {\n        // re-set mute event listener\n        this.props.getCallConnection().on('mute', (isMuted) => {\n          this.setState({ isMuted });\n        });\n        // and update mute button's state\n        this.setState({ isMuted: this.props.getCallConnection().isMuted() });\n\n        // re-set elapsed time timer\n        this.timer = setTimeout(this.tick, 1000);\n        // and update current elapsed time\n        const now = new Date();\n        this.setState({ elapsedTime: now - this.props.getCallStartTime() });\n      }\n      this.handlersSet = true;\n    }\n  };\n\n  componentDidMount() {\n    this.bindListeners();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.bindListeners();\n    /*if (\n      this.props.client &&\n      this.props.client.status() !== prevState.clientStatus\n    ) {\n      this.setState({ clientStatus: this.props.client.status() });\n    }*/\n    this.focusDisplay();\n  }\n\n  acceptIncomingCall = (conn) => {\n    if (conn) {\n      conn.accept();\n      this.updateDisplay(conn.parameters.From);\n      this.props.setCallTypingPN(false);\n      this.props.setCallNextKeyReset(true);\n      this.props.setCallStartTime(new Date());\n      this.timer = setTimeout(this.tick, 1000);\n      this.props.getCallConnection().on('mute', (isMuted) => {\n        this.setState({ isMuted });\n      });\n    } else {\n      console.error('No incoming connection found');\n    }\n  };\n\n  rejectIncomingCall = (conn) => {\n    if (conn) {\n      conn.reject();\n    } else {\n      console.error('No incoming connection found');\n    }\n  };\n\n  render() {\n    if (!this.props.client || this.props.client.status() === 'offline') {\n      return (\n        <Canvas>\n          <ModalMessage\n            msg=\"Voice client is offline\"\n            img=\"offline\"\n          ></ModalMessage>\n        </Canvas>\n      );\n    } else if (this.props.incomingCall !== null) {\n      return (\n        <Canvas>\n          <Label1>Incoming call from</Label1>\n          <Label2>\n            {this.formatNumber(this.props.incomingCall.parameters.From)}\n          </Label2>\n          <IncomingDials>\n            <BtnDialRed\n              theme={this.theme}\n              key=\"RedDial\"\n              onClick={this.rejectIncomingCall.bind(\n                null,\n                this.props.incomingCall\n              )}\n            >\n              <DialRed></DialRed>\n            </BtnDialRed>\n            <BtnDialGreen\n              theme={this.theme}\n              key=\"GreenDial\"\n              onClick={this.acceptIncomingCall.bind(\n                null,\n                this.props.incomingCall\n              )}\n            >\n              <DialGreen></DialGreen>\n            </BtnDialGreen>\n          </IncomingDials>\n        </Canvas>\n      );\n    } else {\n      return (\n        <Canvas>\n          <Display\n            value={this.props.callDisplay}\n            onKeyDown={this.handleKeyDown}\n            onKeyUp={this.handleKeyUp}\n            onChange={this.handleChange}\n            onFocus={this.moveCaretToEnd}\n            onClick={this.moveCaretToEnd}\n            onBlur={this.focusDisplay}\n            ref={this.numberInputRef}\n          />\n          <Timer time={this.showTime(this.state.elapsedTime)} />\n          <CallDialpad\n            dialPressed={this.dialPressed}\n            dialActive={this.state.dialActive}\n            theme={this.theme}\n            callActive={this.props.client.activeConnection() !== undefined}\n            muted={this.state.isMuted}\n          />\n        </Canvas>\n      );\n    }\n  }\n}\n\nconst TimerDisplay = styled.div`\n  font-size: 4vmin;\n  height: 4vmin;\n  padding: 2vmin;\n  @media (min-width: 400px) {\n    font-size: 16px;\n    height: 16px;\n    padding: 8px;\n  }\n`;\n\nfunction Timer(props) {\n  return <TimerDisplay>{props.time}</TimerDisplay>;\n}\n\nconst Canvas = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: center;\n  height: 100vh;\n  max-width: 440px;\n  position: relative;\n  overflow-x: hidden;\n\n  padding-left: 12px;\n  padding-right: 12px;\n`;\n\nconst Display = styled.input`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 0.5vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 2px 12px 2px 12px;\n  }\n  border: 0;\n  background: #e8e8e8;\n  color: transparent;\n  text-shadow: 0 0 0 #222222;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Label1 = styled.div`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 6vmin;\n  width: 66vmin;\n  font-size: 4vmin;\n  text-align: center;\n  padding: 20vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 24px;\n    width: 264px;\n    font-size: 16px;\n    padding: 80px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Label2 = styled.div`\n  outline: none;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 1vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 4px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst IncomingDials = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  position: relative;\n  width: 80vmin;\n  margin-top: 83vmin;\n  justify-items: center;\n  @media (min-width: 400px) {\n    width: 320px;\n    margin-top: 332px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}