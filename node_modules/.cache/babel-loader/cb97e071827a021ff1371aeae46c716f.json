{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LogLevelModule = require(\"loglevel\");\n\nvar constants_1 = require(\"./constants\");\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\n\n\nvar Log =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  function Log(options) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n  }\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n\n\n  Log.getInstance = function () {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n\n    return Log.instance;\n  };\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n\n\n  Log.prototype.debug = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).debug.apply(_a, args);\n  };\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n\n\n  Log.prototype.error = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).error.apply(_a, args);\n  };\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n\n\n  Log.prototype.info = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).info.apply(_a, args);\n  };\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n\n\n  Log.prototype.setDefaultLevel = function (level) {\n    this._log.setDefaultLevel(level);\n  };\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n\n\n  Log.prototype.warn = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).warn.apply(_a, args);\n  };\n  /**\n   * Log levels\n   */\n\n\n  Log.levels = LogLevelModule.levels;\n  return Log;\n}();\n\nexports.default = Log;","map":{"version":3,"sources":["../../lib/twilio/log.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;AAEH,IAAA,cAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAaA;;;AAGG;;;AACH,IAAA,GAAA;AAAA;AAAA,YAAA;AA2BE;;;AAGG;AACH,WAAA,GAAA,CAAY,OAAZ,EAAgC;AAC9B,SAAK,IAAL,GAAY,CAAC,OAAO,IAAI,OAAO,CAAC,cAAnB,GAAoC,OAAO,CAAC,cAA5C,GAA6D,cAA9D,EAA8E,SAA9E,CAAwF,WAAA,CAAA,YAAxF,CAAZ;AACD;AA3BD;;;AAGG;;;AACI,EAAA,GAAA,CAAA,WAAA,GAAP,YAAA;AACE,QAAI,CAAC,GAAG,CAAC,QAAT,EAAmB;AACjB,MAAA,GAAG,CAAC,QAAJ,GAAe,IAAI,GAAJ,EAAf;AACD;;AACD,WAAO,GAAG,CAAC,QAAX;AACD,GALM;AAyBP;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;;AAAM,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,KAAA,EAAA,GAAA,KAAK,IAAL,EAAU,KAAV,CAAe,KAAf,CAAe,EAAf,EAAmB,IAAnB;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;;AAAM,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,KAAA,EAAA,GAAA,KAAK,IAAL,EAAU,KAAV,CAAe,KAAf,CAAe,EAAf,EAAmB,IAAnB;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;;;AAAK,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,KAAA,EAAA,GAAA,KAAK,IAAL,EAAU,IAAV,CAAc,KAAd,CAAc,EAAd,EAAkB,IAAlB;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,KAAhB,EAAkD;AAChD,SAAK,IAAL,CAAU,eAAV,CAA0B,KAA1B;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;;;AAAK,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,KAAA,EAAA,GAAA,KAAK,IAAL,EAAU,IAAV,CAAc,KAAd,CAAc,EAAd,EAAkB,IAAlB;AACD,GAFD;AArEA;;AAEG;;;AACI,EAAA,GAAA,CAAA,MAAA,GAAkC,cAAc,CAAC,MAAjD;AAqET,SAAA,GAAA;AAAC,CAzED,EAAA;;AA2EA,OAAA,CAAA,OAAA,GAAe,GAAf","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n  static getInstance(): Log {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n    return Log.instance;\n  }\n\n  /**\n   * The logger singleton instance\n   */\n  private static instance: Log;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: LogOptions) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(...args);\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    this._log.setDefaultLevel(level);\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(...args);\n  }\n}\n\nexport default Log;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}