{"ast":null,"code":"var EventTarget = require('./eventtarget');\n\nvar inherits = require('util').inherits;\n\nvar POLL_INTERVAL_MS = 500;\nvar nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\n\nfunction MediaDevicesShim() {\n  EventTarget.call(this);\n\n  this._defineEventHandler('devicechange');\n\n  this._defineEventHandler('deviceinfochange');\n\n  var knownDevices = [];\n  Object.defineProperties(this, {\n    _deviceChangeIsNative: {\n      value: reemitNativeEvent(this, 'devicechange')\n    },\n    _deviceInfoChangeIsNative: {\n      value: reemitNativeEvent(this, 'deviceinfochange')\n    },\n    _knownDevices: {\n      value: knownDevices\n    },\n    _pollInterval: {\n      value: null,\n      writable: true\n    }\n  });\n\n  if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n    nativeMediaDevices.enumerateDevices().then(function (devices) {\n      devices.sort(sortDevicesById).forEach([].push, knownDevices);\n    });\n  }\n\n  this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n    if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n      return;\n    }\n\n    this._pollInterval = this._pollInterval || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n  }.bind(this));\n\n  this._eventEmitter.on('removeListener', function maybeStopPolling() {\n    if (this._pollInterval && !hasChangeListeners(this)) {\n      clearInterval(this._pollInterval);\n      this._pollInterval = null;\n    }\n  }.bind(this));\n}\n\ninherits(MediaDevicesShim, EventTarget);\n\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n  MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n    return nativeMediaDevices.enumerateDevices.apply(nativeMediaDevices, arguments);\n  };\n}\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia.apply(nativeMediaDevices, arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  var oldLabels = oldDevices.reduce(function (map, device) {\n    return map.set(device.deviceId, device.label || null);\n  }, new Map());\n  return newDevices.some(function (newDevice) {\n    var oldLabel = oldLabels.get(newDevice.deviceId);\n    return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce(function (count, event) {\n    return count + mediaDevices._eventEmitter.listenerCount(event);\n  }, 0) > 0;\n}\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\n\n\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(function (newDevices) {\n    var knownDevices = mediaDevices._knownDevices;\n    var oldDevices = knownDevices.slice(); // Replace known devices in-place\n\n    [].splice.apply(knownDevices, [0, knownDevices.length].concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\n\n\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some(function (a, i) {\n    return a[propertyName] !== bs[i][propertyName];\n  });\n}\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\n\n\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  var methodName = \"on\" + eventName;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nmodule.exports = function shimMediaDevices() {\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n}();","map":{"version":3,"sources":["../../../lib/twilio/shims/mediadevices.js"],"names":[],"mappings":"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","sourcesContent":["const EventTarget = require('./eventtarget');\nconst inherits = require('util').inherits;\n\nconst POLL_INTERVAL_MS = 500;\n\nconst nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\nfunction MediaDevicesShim() {\n  EventTarget.call(this);\n\n  this._defineEventHandler('devicechange');\n  this._defineEventHandler('deviceinfochange');\n\n  const knownDevices = [];\n  Object.defineProperties(this, {\n    _deviceChangeIsNative: {\n      value: reemitNativeEvent(this, 'devicechange')\n    },\n    _deviceInfoChangeIsNative: {\n      value: reemitNativeEvent(this, 'deviceinfochange')\n    },\n    _knownDevices: {\n      value: knownDevices\n    },\n    _pollInterval: {\n      value: null,\n      writable: true\n    }\n  });\n\n  if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n    nativeMediaDevices.enumerateDevices().then(devices => {\n      devices.sort(sortDevicesById).forEach([].push, knownDevices);\n    });\n  }\n\n  this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n    if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n      return;\n    }\n\n    this._pollInterval = this._pollInterval\n      || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n  }.bind(this));\n\n  this._eventEmitter.on('removeListener', function maybeStopPolling() {\n    if (this._pollInterval && !hasChangeListeners(this)) {\n      clearInterval(this._pollInterval);\n      this._pollInterval = null;\n    }\n  }.bind(this));\n}\n\ninherits(MediaDevicesShim, EventTarget);\n\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n  MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n    return nativeMediaDevices.enumerateDevices(...arguments);\n  };\n}\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia(...arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  const oldLabels = oldDevices.reduce((map, device) => map.set(device.deviceId, device.label || null), new Map());\n\n  return newDevices.some(newDevice => {\n    const oldLabel = oldLabels.get(newDevice.deviceId);\n    return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length\n    || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce((count, event) => count + mediaDevices._eventEmitter.listenerCount(event), 0) > 0;\n}\n\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(newDevices => {\n    const knownDevices = mediaDevices._knownDevices;\n    const oldDevices = knownDevices.slice();\n\n    // Replace known devices in-place\n    [].splice.apply(knownDevices, [0, knownDevices.length]\n      .concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative\n      && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative\n      && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some((a, i) => a[propertyName] !== bs[i][propertyName]);\n}\n\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  const methodName = `on${eventName}`;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nmodule.exports = (function shimMediaDevices() {\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n})();\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}