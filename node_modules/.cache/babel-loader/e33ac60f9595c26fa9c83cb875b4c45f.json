{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\n\nvar events_1 = require(\"events\");\n\nvar connection_1 = require(\"../connection\");\n\nvar device_1 = require(\"../device\");\n\nvar errors_1 = require(\"../errors\");\n\nvar stats_1 = require(\"../rtc/stats\");\n\nvar _a = require('../constants'),\n    COWBELL_AUDIO_URL = _a.COWBELL_AUDIO_URL,\n    ECHO_TEST_DURATION = _a.ECHO_TEST_DURATION;\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\n\n\nvar PreflightTest =\n/** @class */\nfunction (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @constructor\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n\n\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n    /**\n     * Whether this test has already logged an insights-connection-warning.\n     */\n\n\n    _this._hasInsightsErrored = false;\n    /**\n     * Network related timing measurements for this test\n     */\n\n    _this._networkTiming = {};\n    /**\n     * The options passed to {@link PreflightTest} constructor\n     */\n\n    _this._options = {\n      codecPreferences: [connection_1.default.Codec.PCMU, connection_1.default.Codec.Opus],\n      debug: false,\n      edge: 'roaming',\n      fakeMicInput: false,\n      signalingTimeoutMs: 10000\n    };\n    /**\n     * Current status of this test\n     */\n\n    _this._status = PreflightTest.Status.Connecting;\n    Object.assign(_this._options, options);\n    _this._samples = [];\n    _this._warnings = [];\n    _this._startTime = Date.now();\n\n    _this._initDevice(token, __assign(__assign({}, _this._options), {\n      fileInputStream: _this._options.fakeMicInput ? _this._getStreamFromFile() : undefined\n    }));\n\n    return _this;\n  }\n  /**\n   * Stops the current test and raises a failed event.\n   */\n\n\n  PreflightTest.prototype.stop = function () {\n    var _this = this;\n\n    var error = {\n      code: 31008,\n      message: 'Call cancelled'\n    };\n\n    if (this._device) {\n      this._device.once('offline', function () {\n        return _this._onFailed(error);\n      });\n\n      this._device.destroy();\n    } else {\n      this._onFailed(error);\n    }\n  };\n  /**\n   * Emit a {PreflightTest.Warning}\n   */\n\n\n  PreflightTest.prototype._emitWarning = function (name, description, rtcWarning) {\n    var warning = {\n      name: name,\n      description: description\n    };\n\n    if (rtcWarning) {\n      warning.rtcWarning = rtcWarning;\n    }\n\n    this._warnings.push(warning);\n\n    this.emit(PreflightTest.Events.Warning, warning);\n  };\n  /**\n   * Returns call quality base on the RTC Stats\n   */\n\n\n  PreflightTest.prototype._getCallQuality = function (mos) {\n    if (mos > 4.2) {\n      return PreflightTest.CallQuality.Excellent;\n    } else if (mos >= 4.1 && mos <= 4.2) {\n      return PreflightTest.CallQuality.Great;\n    } else if (mos >= 3.7 && mos <= 4) {\n      return PreflightTest.CallQuality.Good;\n    } else if (mos >= 3.1 && mos <= 3.6) {\n      return PreflightTest.CallQuality.Fair;\n    } else {\n      return PreflightTest.CallQuality.Degraded;\n    }\n  };\n  /**\n   * Returns the report for this test.\n   */\n\n\n  PreflightTest.prototype._getReport = function () {\n    var stats = this._getRTCStats();\n\n    var testTiming = {\n      start: this._startTime\n    };\n\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration = this._endTime - this._startTime;\n    }\n\n    var report = {\n      callSid: this._callSid,\n      edge: this._edge,\n      iceCandidateStats: this._rtcIceCandidateStatsReport.iceCandidateStats,\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      selectedEdge: this._options.edge,\n      stats: stats,\n      testTiming: testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings\n    };\n    var selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport.selectedIceCandidatePairStats;\n\n    if (selectedIceCandidatePairStats) {\n      report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n      report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === 'relay' || selectedIceCandidatePairStats.remoteCandidate.candidateType === 'relay';\n    }\n\n    if (stats) {\n      report.callQuality = this._getCallQuality(stats.mos.average);\n    }\n\n    return report;\n  };\n  /**\n   * Returns RTC stats totals for this test\n   */\n\n\n  PreflightTest.prototype._getRTCSampleTotals = function () {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return __assign({}, this._latestSample.totals);\n  };\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n\n\n  PreflightTest.prototype._getRTCStats = function () {\n    var firstMosSampleIdx = this._samples.findIndex(function (sample) {\n      return typeof sample.mos === 'number' && sample.mos > 0;\n    });\n\n    var samples = firstMosSampleIdx >= 0 ? this._samples.slice(firstMosSampleIdx) : [];\n\n    if (!samples || !samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce(function (statObj, stat) {\n      var _a;\n\n      var values = samples.map(function (s) {\n        return s[stat];\n      });\n      return __assign(__assign({}, statObj), (_a = {}, _a[stat] = {\n        average: Number((values.reduce(function (total, value) {\n          return total + value;\n        }) / values.length).toPrecision(5)),\n        max: Math.max.apply(Math, values),\n        min: Math.min.apply(Math, values)\n      }, _a));\n    }, {});\n  };\n  /**\n   * Returns a MediaStream from a media file\n   */\n\n\n  PreflightTest.prototype._getStreamFromFile = function () {\n    var audioContext = this._options.audioContext;\n\n    if (!audioContext) {\n      throw new errors_1.NotSupportedError('Cannot fake input audio stream: AudioContext is not supported by this browser.');\n    }\n\n    var audioEl = new Audio(COWBELL_AUDIO_URL);\n    audioEl.addEventListener('canplaythrough', function () {\n      return audioEl.play();\n    });\n\n    if (typeof audioEl.setAttribute === 'function') {\n      audioEl.setAttribute('crossorigin', 'anonymous');\n    }\n\n    var src = audioContext.createMediaElementSource(audioEl);\n    var dest = audioContext.createMediaStreamDestination();\n    src.connect(dest);\n    return dest.stream;\n  };\n  /**\n   * Initialize the device\n   */\n\n\n  PreflightTest.prototype._initDevice = function (token, options) {\n    var _this = this;\n\n    try {\n      this._device = new (options.deviceFactory || device_1.default)(token, {\n        codecPreferences: options.codecPreferences,\n        debug: options.debug,\n        edge: options.edge,\n        fileInputStream: options.fileInputStream,\n        iceServers: options.iceServers,\n        preflight: true,\n        rtcConfiguration: options.rtcConfiguration\n      });\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(function () {\n        _this._onFailed(error);\n      });\n      return;\n    }\n\n    this._device.once('ready', function () {\n      _this._onDeviceReady();\n    });\n\n    this._device.once('error', function (error) {\n      _this._onDeviceError(error);\n    });\n\n    this._signalingTimeoutTimer = setTimeout(function () {\n      _this._onDeviceError({\n        code: 31901,\n        message: 'WebSocket - Connection Timeout'\n      });\n    }, options.signalingTimeoutMs);\n  };\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n\n\n  PreflightTest.prototype._onDeviceError = function (error) {\n    this._device.destroy();\n\n    this._onFailed(error);\n  };\n  /**\n   * Called on {@link Device} ready event\n   */\n\n\n  PreflightTest.prototype._onDeviceReady = function () {\n    var _this = this;\n\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n    this._connection = this._device.connect();\n    this._networkTiming.signaling = {\n      start: Date.now()\n    };\n\n    this._setupConnectionHandlers(this._connection);\n\n    this._edge = this._device.edge || undefined;\n\n    if (this._options.fakeMicInput) {\n      this._echoTimer = setTimeout(function () {\n        return _this._device.disconnectAll();\n      }, ECHO_TEST_DURATION);\n      var audio = this._device.audio;\n\n      if (audio) {\n        audio.disconnect(false);\n        audio.outgoing(false);\n      }\n    }\n\n    this._device.once('disconnect', function () {\n      _this._device.once('offline', function () {\n        return _this._onOffline();\n      });\n\n      _this._device.destroy();\n    });\n\n    var publisher = this._connection['_publisher'];\n    publisher.on('error', function () {\n      if (!_this._hasInsightsErrored) {\n        _this._emitWarning('insights-connection-error', 'Received an error when attempting to connect to Insights gateway');\n      }\n\n      _this._hasInsightsErrored = true;\n    });\n  };\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n\n\n  PreflightTest.prototype._onFailed = function (error) {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n\n    this._releaseHandlers();\n\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this.emit(PreflightTest.Events.Failed, error);\n  };\n  /**\n   * Called when the device goes offline.\n   * This indicates that the test has been completed, but we won't know if it failed or not.\n   * The onError event will be the indicator whether the test failed.\n   */\n\n\n  PreflightTest.prototype._onOffline = function () {\n    var _this = this; // We need to make sure we always execute preflight.on('completed') last\n    // as client SDK sometimes emits 'offline' event before emitting fatal errors.\n\n\n    setTimeout(function () {\n      if (_this._status === PreflightTest.Status.Failed) {\n        return;\n      }\n\n      clearTimeout(_this._echoTimer);\n      clearTimeout(_this._signalingTimeoutTimer);\n\n      _this._releaseHandlers();\n\n      _this._endTime = Date.now();\n      _this._status = PreflightTest.Status.Completed;\n      _this._report = _this._getReport();\n\n      _this.emit(PreflightTest.Events.Completed, _this._report);\n    }, 10);\n  };\n  /**\n   * Clean up all handlers for device and connection\n   */\n\n\n  PreflightTest.prototype._releaseHandlers = function () {\n    [this._device, this._connection].forEach(function (emitter) {\n      if (emitter) {\n        emitter.eventNames().forEach(function (name) {\n          return emitter.removeAllListeners(name);\n        });\n      }\n    });\n  };\n  /**\n   * Setup the event handlers for the {@link Connection} of the test call\n   * @param connection\n   */\n\n\n  PreflightTest.prototype._setupConnectionHandlers = function (connection) {\n    var _this = this;\n\n    if (this._options.fakeMicInput) {\n      // When volume events start emitting, it means all audio outputs have been created.\n      // Let's mute them if we're using fake mic input.\n      connection.once('volume', function () {\n        connection.mediaStream.outputs.forEach(function (output) {\n          return output.audio.muted = true;\n        });\n      });\n    }\n\n    connection.on('warning', function (name, data) {\n      _this._emitWarning(name, 'Received an RTCWarning. See .rtcWarning for the RTCWarning', data);\n    });\n    connection.once('accept', function () {\n      _this._callSid = connection.mediaStream.callSid;\n      _this._status = PreflightTest.Status.Connected;\n\n      _this.emit(PreflightTest.Events.Connected);\n    });\n    connection.on('sample', function (sample) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!!this._latestSample) return [3\n              /*break*/\n              , 2];\n              _a = this;\n              return [4\n              /*yield*/\n              , (this._options.getRTCIceCandidateStatsReport || stats_1.getRTCIceCandidateStatsReport)(connection.mediaStream.version.pc)];\n\n            case 1:\n              _a._rtcIceCandidateStatsReport = _b.sent();\n              _b.label = 2;\n\n            case 2:\n              this._latestSample = sample;\n\n              this._samples.push(sample);\n\n              this.emit(PreflightTest.Events.Sample, sample);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }); // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection'\n    }, {\n      reportLabel: 'ice',\n      type: 'iceconnection'\n    }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport'\n    }, {\n      reportLabel: 'signaling',\n      type: 'signaling'\n    }].forEach(function (_a) {\n      var type = _a.type,\n          reportLabel = _a.reportLabel;\n      var handlerName = \"on\" + type + \"statechange\";\n      var originalHandler = connection.mediaStream[handlerName];\n\n      connection.mediaStream[handlerName] = function (state) {\n        var timing = _this._networkTiming[reportLabel] = _this._networkTiming[reportLabel] || {\n          start: 0\n        };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if ((state === 'connected' || state === 'stable') && !timing.duration) {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  };\n\n  Object.defineProperty(PreflightTest.prototype, \"callSid\", {\n    /**\n     * The callsid generated for the test call.\n     */\n    get: function get() {\n      return this._callSid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"endTime\", {\n    /**\n     * A timestamp in milliseconds of when the test ended.\n     */\n    get: function get() {\n      return this._endTime;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"latestSample\", {\n    /**\n     * The latest WebRTC sample collected.\n     */\n    get: function get() {\n      return this._latestSample;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"report\", {\n    /**\n     * The report for this test.\n     */\n    get: function get() {\n      return this._report;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"startTime\", {\n    /**\n     * A timestamp in milliseconds of when the test started.\n     */\n    get: function get() {\n      return this._startTime;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"status\", {\n    /**\n     * The status of the test.\n     */\n    get: function get() {\n      return this._status;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PreflightTest;\n}(events_1.EventEmitter);\n\nexports.PreflightTest = PreflightTest;\n\n(function (PreflightTest) {\n  /**\n   * The quality of the call determined by different mos ranges.\n   * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n   */\n  var CallQuality;\n\n  (function (CallQuality) {\n    /**\n     * If the average mos is over 4.2.\n     */\n    CallQuality[\"Excellent\"] = \"excellent\";\n    /**\n     * If the average mos is between 4.1 and 4.2 both inclusive.\n     */\n\n    CallQuality[\"Great\"] = \"great\";\n    /**\n     * If the average mos is between 3.7 and 4.0 both inclusive.\n     */\n\n    CallQuality[\"Good\"] = \"good\";\n    /**\n     * If the average mos is between 3.1 and 3.6 both inclusive.\n     */\n\n    CallQuality[\"Fair\"] = \"fair\";\n    /**\n     * If the average mos is 3.0 or below.\n     */\n\n    CallQuality[\"Degraded\"] = \"degraded\";\n  })(CallQuality = PreflightTest.CallQuality || (PreflightTest.CallQuality = {}));\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n\n\n  var Events;\n\n  (function (Events) {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Events[\"Completed\"] = \"completed\";\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n\n    Events[\"Connected\"] = \"connected\";\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n\n    Events[\"Failed\"] = \"failed\";\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n\n    Events[\"Sample\"] = \"sample\";\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n\n    Events[\"Warning\"] = \"warning\";\n  })(Events = PreflightTest.Events || (PreflightTest.Events = {}));\n  /**\n   * Possible status of the test.\n   */\n\n\n  var Status;\n\n  (function (Status) {\n    /**\n     * Connection to Twilio has initiated.\n     */\n    Status[\"Connecting\"] = \"connecting\";\n    /**\n     * Connection to Twilio has been established.\n     */\n\n    Status[\"Connected\"] = \"connected\";\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n\n    Status[\"Completed\"] = \"completed\";\n    /**\n     * The test has stopped and failed.\n     */\n\n    Status[\"Failed\"] = \"failed\";\n  })(Status = PreflightTest.Status || (PreflightTest.Status = {}));\n})(PreflightTest = exports.PreflightTest || (exports.PreflightTest = {}));\n\nexports.PreflightTest = PreflightTest;","map":{"version":3,"sources":["../../../lib/twilio/preflight/preflight.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nimport { EventEmitter } from 'events';\nimport Connection from '../connection';\nimport Device from '../device';\nimport { NotSupportedError } from '../errors';\nimport { RTCSampleTotals } from '../rtc/sample';\nimport RTCSample from '../rtc/sample';\nimport { getRTCIceCandidateStatsReport } from '../rtc/stats';\nimport RTCWarning from '../rtc/warning';\nimport StatsMonitor from '../statsMonitor';\nimport { NetworkTiming, TimeMeasurement } from './timing';\n\nconst { COWBELL_AUDIO_URL, ECHO_TEST_DURATION } = require('../constants');\n\n/**\n * Placeholder until we convert peerconnection.js to TypeScript.\n * Represents the audio output object coming from Client SDK's PeerConnection object.\n * @internalapi\n */\nexport interface AudioOutput {\n  /**\n   * The audio element used to play out the sound.\n   */\n  audio: HTMLAudioElement;\n}\n\nexport declare interface PreflightTest {\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Completed]].\n   * During this time, [[PreflightTest.report]] is available and ready to be inspected.\n   * In some cases, this will not trigger if the test encounters a fatal error prior connecting to Twilio.\n   * See [[PreflightTest.failedEvent]].\n   * @param report\n   * @example `preflight.on('completed', report => console.log(report))`\n   * @event\n   */\n  completedEvent(report: PreflightTest.Report): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Connected]].\n   * @example `preflight.on('connected', () => console.log('Test connected'))`\n   * @event\n   */\n  connectedEvent(): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Failed]].\n   * This happens when establishing a connection to Twilio has failed or when a test call has encountered a fatal error.\n   * This is also raised if [[PreflightTest.stop]] is called while the test is in progress.\n   * @param error\n   * @example `preflight.on('failed', error => console.log(error))`\n   * @event\n   */\n  failedEvent(error: Device.Error | DOMError): void;\n\n  /**\n   * Raised when the [[Connection]] gets a webrtc sample object. This event is published every second.\n   * @param sample\n   * @example `preflight.on('sample', sample => console.log(sample))`\n   * @event\n   */\n  sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Raised whenever the [[Connection]] encounters a warning.\n   * @param name - The name of the warning.\n   * @example `preflight.on('warning', (name, data) => console.log({ name, data }))`\n   * @event\n   */\n  warningEvent(name: string, data: PreflightTest.Warning): void;\n}\n\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\nexport class PreflightTest extends EventEmitter {\n  /**\n   * Callsid generated for this test call\n   */\n  private _callSid: string | undefined;\n\n  /**\n   * The {@link Connection} for this test call\n   */\n  private _connection: Connection;\n\n  /**\n   * The {@link Device} for this test call\n   */\n  private _device: Device;\n\n  /**\n   * The timer when doing an echo test\n   * The echo test is used when fakeMicInput is set to true\n   */\n  private _echoTimer: NodeJS.Timer;\n\n  /**\n   * The edge that the `Twilio.Device` connected to.\n   */\n  private _edge: string | undefined;\n\n  /**\n   * End of test timestamp\n   */\n  private _endTime: number | undefined;\n\n  /**\n   * Whether this test has already logged an insights-connection-warning.\n   */\n  private _hasInsightsErrored: boolean = false;\n\n  /**\n   * Latest WebRTC sample collected for this test\n   */\n  private _latestSample: RTCSample | undefined;\n\n  /**\n   * Network related timing measurements for this test\n   */\n  private _networkTiming: NetworkTiming = {};\n\n  /**\n   * The options passed to {@link PreflightTest} constructor\n   */\n  private _options: PreflightTest.ExtendedOptions = {\n    codecPreferences: [Connection.Codec.PCMU, Connection.Codec.Opus],\n    debug: false,\n    edge: 'roaming',\n    fakeMicInput: false,\n    signalingTimeoutMs: 10000,\n  };\n\n  /**\n   * The report for this test.\n   */\n  private _report: PreflightTest.Report | undefined;\n\n  /**\n   * The WebRTC ICE candidates stats information collected during the test\n   */\n  private _rtcIceCandidateStatsReport: PreflightTest.RTCIceCandidateStatsReport;\n\n  /**\n   * WebRTC samples collected during this test\n   */\n  private _samples: RTCSample[];\n\n  /**\n   * Timer for setting up signaling connection\n   */\n  private _signalingTimeoutTimer: number;\n\n  /**\n   * Start of test timestamp\n   */\n  private _startTime: number;\n\n  /**\n   * Current status of this test\n   */\n  private _status: PreflightTest.Status = PreflightTest.Status.Connecting;\n\n  /**\n   * List of warning names and warning data detected during this test\n   */\n  private _warnings: PreflightTest.Warning[];\n\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @constructor\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n  constructor(token: string, options: PreflightTest.ExtendedOptions) {\n    super();\n\n    Object.assign(this._options, options);\n\n    this._samples = [];\n    this._warnings = [];\n    this._startTime = Date.now();\n\n    this._initDevice(token, {\n      ...this._options,\n      fileInputStream: this._options.fakeMicInput ?\n        this._getStreamFromFile() : undefined,\n    });\n  }\n\n  /**\n   * Stops the current test and raises a failed event.\n   */\n  stop(): void {\n    const error: Device.Error = {\n      code: 31008,\n      message: 'Call cancelled',\n    };\n    if (this._device) {\n      this._device.once('offline', () => this._onFailed(error));\n      this._device.destroy();\n    } else {\n      this._onFailed(error);\n    }\n  }\n\n  /**\n   * Emit a {PreflightTest.Warning}\n   */\n  private _emitWarning(name: string, description: string, rtcWarning?: RTCWarning): void {\n    const warning: PreflightTest.Warning = { name, description };\n    if (rtcWarning) {\n      warning.rtcWarning = rtcWarning;\n    }\n    this._warnings.push(warning);\n    this.emit(PreflightTest.Events.Warning, warning);\n  }\n\n  /**\n   * Returns call quality base on the RTC Stats\n   */\n  private _getCallQuality(mos: number): PreflightTest.CallQuality {\n    if (mos > 4.2) {\n      return PreflightTest.CallQuality.Excellent;\n    } else if (mos >= 4.1 && mos <= 4.2) {\n      return PreflightTest.CallQuality.Great;\n    } else if (mos >= 3.7 && mos <= 4) {\n      return PreflightTest.CallQuality.Good;\n    } else if (mos >= 3.1 && mos <= 3.6) {\n      return PreflightTest.CallQuality.Fair;\n    } else {\n      return PreflightTest.CallQuality.Degraded;\n    }\n  }\n\n  /**\n   * Returns the report for this test.\n   */\n  private _getReport(): PreflightTest.Report {\n    const stats = this._getRTCStats();\n    const testTiming: TimeMeasurement = { start: this._startTime };\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration  = this._endTime - this._startTime;\n    }\n\n    const report: PreflightTest.Report = {\n      callSid: this._callSid,\n      edge: this._edge,\n      iceCandidateStats: this._rtcIceCandidateStatsReport.iceCandidateStats,\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      selectedEdge: this._options.edge,\n      stats,\n      testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings,\n    };\n\n    const selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport.selectedIceCandidatePairStats;\n\n    if (selectedIceCandidatePairStats) {\n      report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n      report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === 'relay'\n      || selectedIceCandidatePairStats.remoteCandidate.candidateType === 'relay';\n    }\n\n    if (stats) {\n      report.callQuality = this._getCallQuality(stats.mos.average);\n    }\n\n    return report;\n  }\n\n  /**\n   * Returns RTC stats totals for this test\n   */\n  private _getRTCSampleTotals(): RTCSampleTotals | undefined {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return { ...this._latestSample.totals };\n  }\n\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n  private _getRTCStats(): PreflightTest.RTCStats | undefined {\n    const firstMosSampleIdx = this._samples.findIndex(\n      sample => typeof sample.mos === 'number' && sample.mos > 0,\n    );\n\n    const samples = firstMosSampleIdx >= 0\n      ? this._samples.slice(firstMosSampleIdx)\n      : [];\n\n    if (!samples || !samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce((statObj, stat) => {\n      const values = samples.map(s => s[stat]);\n      return {\n        ...statObj,\n        [stat]: {\n          average: Number((values.reduce((total, value) => total + value) / values.length).toPrecision(5)),\n          max: Math.max(...values),\n          min: Math.min(...values),\n        },\n      };\n    }, {} as any);\n  }\n\n  /**\n   * Returns a MediaStream from a media file\n   */\n  private _getStreamFromFile(): MediaStream {\n    const audioContext = this._options.audioContext;\n    if (!audioContext) {\n      throw new NotSupportedError('Cannot fake input audio stream: AudioContext is not supported by this browser.');\n    }\n\n    const audioEl: any = new Audio(COWBELL_AUDIO_URL);\n\n    audioEl.addEventListener('canplaythrough', () => audioEl.play());\n    if (typeof audioEl.setAttribute === 'function') {\n      audioEl.setAttribute('crossorigin', 'anonymous');\n    }\n\n    const src = audioContext.createMediaElementSource(audioEl);\n    const dest = audioContext.createMediaStreamDestination();\n    src.connect(dest);\n\n    return dest.stream;\n  }\n\n  /**\n   * Initialize the device\n   */\n  private _initDevice(token: string, options: PreflightTest.ExtendedOptions): void {\n    try {\n      this._device = new (options.deviceFactory || Device)(token, {\n        codecPreferences: options.codecPreferences,\n        debug: options.debug,\n        edge: options.edge,\n        fileInputStream: options.fileInputStream,\n        iceServers: options.iceServers,\n        preflight: true,\n        rtcConfiguration: options.rtcConfiguration,\n      });\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(() => {\n        this._onFailed(error);\n      });\n      return;\n    }\n\n    this._device.once('ready', () => {\n      this._onDeviceReady();\n    });\n\n    this._device.once('error', (error: Device.Error) => {\n      this._onDeviceError(error);\n    });\n\n    this._signalingTimeoutTimer = setTimeout(() => {\n      this._onDeviceError({\n        code: 31901,\n        message: 'WebSocket - Connection Timeout',\n      });\n    }, options.signalingTimeoutMs);\n  }\n\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n  private _onDeviceError(error: Device.Error): void {\n    this._device.destroy();\n    this._onFailed(error);\n  }\n\n  /**\n   * Called on {@link Device} ready event\n   */\n  private _onDeviceReady(): void {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n\n    this._connection = this._device.connect();\n    this._networkTiming.signaling = { start: Date.now() };\n    this._setupConnectionHandlers(this._connection);\n\n    this._edge = this._device.edge || undefined;\n    if (this._options.fakeMicInput) {\n      this._echoTimer = setTimeout(() => this._device.disconnectAll(), ECHO_TEST_DURATION);\n\n      const audio = this._device.audio as any;\n      if (audio) {\n        audio.disconnect(false);\n        audio.outgoing(false);\n      }\n    }\n\n    this._device.once('disconnect', () => {\n      this._device.once('offline', () => this._onOffline());\n      this._device.destroy();\n    });\n\n    const publisher = this._connection['_publisher'] as any;\n    publisher.on('error', () => {\n      if (!this._hasInsightsErrored) {\n        this._emitWarning('insights-connection-error',\n          'Received an error when attempting to connect to Insights gateway');\n      }\n      this._hasInsightsErrored = true;\n    });\n  }\n\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n  private _onFailed(error: Device.Error | DOMError): void {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n    this._releaseHandlers();\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this.emit(PreflightTest.Events.Failed, error);\n  }\n\n  /**\n   * Called when the device goes offline.\n   * This indicates that the test has been completed, but we won't know if it failed or not.\n   * The onError event will be the indicator whether the test failed.\n   */\n  private _onOffline(): void {\n    // We need to make sure we always execute preflight.on('completed') last\n    // as client SDK sometimes emits 'offline' event before emitting fatal errors.\n    setTimeout(() => {\n      if (this._status === PreflightTest.Status.Failed) {\n        return;\n      }\n\n      clearTimeout(this._echoTimer);\n      clearTimeout(this._signalingTimeoutTimer);\n\n      this._releaseHandlers();\n      this._endTime = Date.now();\n      this._status = PreflightTest.Status.Completed;\n      this._report = this._getReport();\n      this.emit(PreflightTest.Events.Completed, this._report);\n    }, 10);\n  }\n\n  /**\n   * Clean up all handlers for device and connection\n   */\n  private _releaseHandlers(): void {\n    [this._device, this._connection].forEach((emitter: EventEmitter) => {\n      if (emitter) {\n        emitter.eventNames().forEach((name: string) => emitter.removeAllListeners(name));\n      }\n    });\n  }\n\n  /**\n   * Setup the event handlers for the {@link Connection} of the test call\n   * @param connection\n   */\n  private _setupConnectionHandlers(connection: Connection): void {\n    if (this._options.fakeMicInput) {\n      // When volume events start emitting, it means all audio outputs have been created.\n      // Let's mute them if we're using fake mic input.\n      connection.once('volume', () => {\n        connection.mediaStream.outputs\n          .forEach((output: AudioOutput) => output.audio.muted = true);\n      });\n    }\n\n    connection.on('warning', (name: string, data: RTCWarning) => {\n      this._emitWarning(name, 'Received an RTCWarning. See .rtcWarning for the RTCWarning', data);\n    });\n\n    connection.once('accept', () => {\n      this._callSid = connection.mediaStream.callSid;\n      this._status = PreflightTest.Status.Connected;\n      this.emit(PreflightTest.Events.Connected);\n    });\n\n    connection.on('sample', async (sample) => {\n      // RTC Stats are ready. We only need to get ICE candidate stats report once.\n      if (!this._latestSample) {\n        this._rtcIceCandidateStatsReport = await (\n          this._options.getRTCIceCandidateStatsReport || getRTCIceCandidateStatsReport\n        )(connection.mediaStream.version.pc);\n      }\n\n      this._latestSample = sample;\n      this._samples.push(sample);\n      this.emit(PreflightTest.Events.Sample, sample);\n    });\n\n    // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection',\n     }, {\n      reportLabel: 'ice',\n      type: 'iceconnection',\n     }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport',\n     }, {\n      reportLabel: 'signaling',\n      type: 'signaling',\n     }].forEach(({type, reportLabel}) => {\n\n      const handlerName = `on${type}statechange`;\n      const originalHandler = connection.mediaStream[handlerName];\n\n      connection.mediaStream[handlerName] = (state: string) => {\n        const timing = (this._networkTiming as any)[reportLabel]\n          = (this._networkTiming as any)[reportLabel] || { start: 0 };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if ((state === 'connected' || state === 'stable') && !timing.duration) {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  }\n\n  /**\n   * The callsid generated for the test call.\n   */\n  get callSid(): string | undefined {\n    return this._callSid;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test ended.\n   */\n  get endTime(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * The latest WebRTC sample collected.\n   */\n  get latestSample(): RTCSample | undefined {\n    return this._latestSample;\n  }\n\n  /**\n   * The report for this test.\n   */\n  get report(): PreflightTest.Report | undefined {\n    return this._report;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test started.\n   */\n  get startTime(): number {\n    return this._startTime;\n  }\n\n  /**\n   * The status of the test.\n   */\n  get status(): PreflightTest.Status {\n    return this._status;\n  }\n}\n\nexport namespace PreflightTest {\n  /**\n   * The quality of the call determined by different mos ranges.\n   * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n   */\n  export enum CallQuality {\n    /**\n     * If the average mos is over 4.2.\n     */\n    Excellent = 'excellent',\n\n    /**\n     * If the average mos is between 4.1 and 4.2 both inclusive.\n     */\n    Great = 'great',\n\n    /**\n     * If the average mos is between 3.7 and 4.0 both inclusive.\n     */\n    Good = 'good',\n\n    /**\n     * If the average mos is between 3.1 and 3.6 both inclusive.\n     */\n    Fair = 'fair',\n\n    /**\n     * If the average mos is 3.0 or below.\n     */\n    Degraded = 'degraded',\n  }\n\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n  export enum Events {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Completed = 'completed',\n\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n    Connected = 'connected',\n\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n    Failed = 'failed',\n\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n    Sample = 'sample',\n\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n    Warning = 'warning',\n  }\n\n  /**\n   * Possible status of the test.\n   */\n  export enum Status {\n    /**\n     * Connection to Twilio has initiated.\n     */\n    Connecting = 'connecting',\n\n    /**\n     * Connection to Twilio has been established.\n     */\n    Connected = 'connected',\n\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n    Completed = 'completed',\n\n    /**\n     * The test has stopped and failed.\n     */\n    Failed = 'failed',\n  }\n\n  /**\n   * The WebRTC API's [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n   * dictionary which provides information related to an ICE candidate.\n   */\n  export type RTCIceCandidateStats = any;\n\n  /**\n   * Options that may be passed to {@link PreflightTest} constructor for internal testing.\n   * @internalapi\n   */\n  export interface ExtendedOptions extends Options {\n    /**\n     * The AudioContext instance to use\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * Device class to use.\n     */\n    deviceFactory?: new (token: string, options: Device.Options) => Device;\n\n    /**\n     * File input stream to use instead of reading from mic\n     */\n    fileInputStream?: MediaStream;\n\n    /**\n     * The getRTCIceCandidateStatsReport to use for testing.\n     */\n    getRTCIceCandidateStatsReport?: Function;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor during `Device.setup`.\n     */\n    rtcConfiguration?: RTCConfiguration;\n  }\n\n  /**\n   * A WebRTC stats report containing relevant information about selected and gathered ICE candidates\n   */\n  export interface RTCIceCandidateStatsReport {\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n  }\n\n  /**\n   * Options passed to {@link PreflightTest} constructor.\n   */\n  export interface Options {\n    /**\n     * An ordered array of codec names that will be used during the test call,\n     * from most to least preferred.\n     * @default ['pcmu','opus']\n     */\n    codecPreferences?: Connection.Codec[];\n\n    /**\n     * Whether to enable debug logging.\n     * @default false\n     */\n    debug?: boolean;\n\n    /**\n     * Specifies which Twilio Data Center to use when initiating the test call.\n     * Please see this\n     * [page](https://www.twilio.com/docs/voice/client/edges)\n     * for the list of available edges.\n     * @default roaming\n     */\n    edge?: string;\n\n    /**\n     * If set to `true`, the test call will ignore microphone input and will use a default audio file.\n     * If set to `false`, the test call will capture the audio from the microphone.\n     * Setting this to `true` is only supported on Chrome and will throw a fatal error on other browsers\n     * @default false\n     */\n    fakeMicInput?: boolean;\n\n    /**\n     * An array of custom ICE servers to use to connect media. If you provide both STUN and TURN server configurations,\n     * the test will detect whether a TURN server is required to establish a connection.\n     *\n     * The following example demonstrates how to use [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn)\n     * to generate STUN/TURN credentials and how to specify a specific [edge location](https://www.twilio.com/docs/global-infrastructure/edge-locations).\n     *\n     * ```ts\n     * import Client from 'twilio';\n     * import { Device } from 'twilio-client';\n     *\n     * // Generate the STUN and TURN server credentials with a ttl of 120 seconds\n     * const client = Client(twilioAccountSid, authToken);\n     * const token = await client.tokens.create({ ttl: 120 });\n     *\n     * let iceServers = token.iceServers;\n     *\n     * // By default, global will be used as the default edge location.\n     * // You can replace global with a specific edge name for each of the iceServer configuration.\n     * iceServers = iceServers.map(config => {\n     *   let { url, urls, ...rest } = config;\n     *   url = url.replace('global', 'ashburn');\n     *   urls = urls.replace('global', 'ashburn');\n     *\n     *   return { url, urls, ...rest };\n     * });\n     *\n     * // Use the TURN credentials using the iceServers parameter\n     * const preflightTest = Device.runPreflight(token, { iceServers });\n     *\n     * // Read from the report object to determine whether TURN is required to connect to media\n     * preflightTest.on('completed', (report) => {\n     *   console.log(report.isTurnRequired);\n     * });\n     * ```\n     *\n     * @default null\n     */\n    iceServers?: RTCIceServer[];\n\n    /**\n     * Amount of time to wait for setting up signaling connection.\n     * @default 10000\n     */\n    signalingTimeoutMs?: number;\n  }\n\n  /**\n   * Represents the WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n   */\n  export interface RTCSelectedIceCandidatePairStats {\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected local ICE candidate.\n     */\n    localCandidate: RTCIceCandidateStats;\n\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected remote ICE candidate.\n     */\n    remoteCandidate: RTCIceCandidateStats;\n  }\n\n  /**\n   * Represents RTC related stats that are extracted from RTC samples.\n   */\n  export interface RTCStats {\n    /**\n     * Packets delay variation.\n     */\n    jitter: Stats;\n\n    /**\n     * Mean opinion score, 1.0 through roughly 4.5.\n     */\n    mos: Stats;\n\n    /**\n     * Round trip time, to the server back to the client.\n     */\n    rtt: Stats;\n  }\n\n  /**\n   * Represents general stats for a specific metric.\n   */\n  export interface Stats {\n    /**\n     * The average value for this metric.\n     */\n    average: number;\n\n    /**\n     * The maximum value for this metric.\n     */\n    max: number;\n\n    /**\n     * The minimum value for this metric.\n     */\n    min: number;\n  }\n\n  /**\n   * Represents the report generated from a {@link PreflightTest}.\n   */\n  export interface Report {\n    /**\n     * The quality of the call determined by different mos ranges.\n     */\n    callQuality?: CallQuality;\n\n    /**\n     * CallSid generaged during the test.\n     */\n    callSid: string | undefined;\n\n    /**\n     * The edge that the test call was connected to.\n     */\n    edge?: string;\n\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * Whether a TURN server is required to connect to media.\n     * This is dependent on the selected ICE candidates, and will be true if either is of type \"relay\",\n     * false if both are of another type, or undefined if there are no selected ICE candidates.\n     * See `PreflightTest.Options.iceServers` for more details.\n     */\n    isTurnRequired?: boolean;\n\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n\n    /**\n     * WebRTC samples collected during the test.\n     */\n    samples: RTCSample[];\n\n    /**\n     * The edge passed to `Device.runPreflight`.\n     */\n    selectedEdge?: string;\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n\n    /**\n     * RTC related stats captured during the test.\n     */\n    stats?: RTCStats;\n\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n\n    /**\n     * Calculated totals in RTC statistics samples.\n     */\n    totals?: RTCSampleTotals;\n\n    /**\n     * List of warning names and warning data detected during this test.\n     */\n    warnings: PreflightTest.Warning[];\n  }\n\n  /**\n   * A warning that can be raised by Preflight, and returned in the Report.warnings field.\n   */\n  export interface Warning {\n    /**\n     * Description of the Warning\n     */\n    description: string;\n    /**\n     * Name of the Warning\n     */\n    name: string;\n    /**\n     * If applicable, the RTCWarning that triggered this warning.\n     */\n    rtcWarning?: RTCWarning;\n  }\n }\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}