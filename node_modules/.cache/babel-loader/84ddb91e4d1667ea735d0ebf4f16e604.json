{"ast":null,"code":"var _jsxFileName = \"/root/twilio-phone-client/src/components/CallCanvas.js\";\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport styled from 'styled-components';\nimport { BtnDialRed, BtnDialGreen, DialRed, DialGreen } from './CallDialpadComponents';\nimport { ModalMessage } from './CommonComponents';\nimport { AsYouType } from 'libphonenumber-js';\nimport CallDialpad from './CallDialpad';\nexport default class CanvasMsg extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connectCall = () => {\n      if (this.props.client.status() !== 'ready') {\n        console.error('Client is not ready (' + this.props.client.status() + ')');\n        return;\n      }\n\n      console.log('Dialing', this.props.callDisplay);\n      this.props.setCallConnection(this.props.client.connect({\n        number: this.props.callDisplay\n      }));\n      this.props.getCallConnection().on('mute', isMuted => {\n        this.setState({\n          isMuted\n        });\n      });\n      this.props.setCallTypingPN(false);\n      this.props.setCallNextKeyReset(true);\n      this.props.setCallStartTime(new Date());\n      this.timer = setTimeout(this.tick, 1000);\n    };\n\n    this.tick = () => {\n      const now = new Date();\n      this.setState({\n        elapsedTime: now - this.props.getCallStartTime()\n      });\n      this.timer = setTimeout(this.tick, 1000 - now % 1000);\n    };\n\n    this.hangupCall = () => {\n      this.props.client.disconnectAll();\n    };\n\n    this.wrapupCall = () => {\n      clearTimeout(this.timer);\n      this.setState({\n        elapsedTime: null,\n        isMuted: false\n      }); // Destroy any pending connection listeners\n\n      if (this.props.getCallConnection()) {\n        this.props.getCallConnection().removeAllListeners('mute');\n      }\n    };\n\n    this.toggleMute = () => {\n      this.props.getCallConnection().mute(!this.props.getCallConnection().isMuted());\n    };\n\n    this.dialPressed = dial => {\n      let _display = this.props.callDisplay; // reset display (e.g. after call is placed)\n\n      if (this.props.getCallNextKeyReset() && dial.match(/^[0-9+#*]$/)) {\n        this.props.setCallDisplay('');\n        _display = '';\n        this.props.setCallNextKeyReset(false);\n      }\n\n      if (dial.match(/^[0-9#*]$/)) {\n        this.updateDisplay(_display + dial);\n      } else if (dial === 'Backspace') {\n        if (_display.charAt(_display.length - 1) === ')') {\n          this.updateDisplay(_display.substr(0, _display.length - 2));\n        } else {\n          this.updateDisplay(_display.substr(0, _display.length - 1));\n        }\n      } else if (dial === '+') {\n        if (_display === '') {\n          this.updateDisplay('+');\n        }\n      }\n\n      this.numberInputRef.current.focus();\n      this.runPressEvents(dial);\n    };\n\n    this.dialFakeReset = dial => {\n      if (this.state.dialActive[dial] !== undefined) {\n        this.setState({\n          dialActive: update(this.state.dialActive, {\n            [dial]: {\n              $set: false\n            }\n          })\n        });\n      }\n    };\n\n    this.dialFakePressed = dial => {\n      if (this.state.dialActive[dial] !== undefined) {\n        this.setState({\n          dialActive: update(this.state.dialActive, {\n            [dial]: {\n              $set: true\n            }\n          })\n        });\n      }\n\n      this.runPressEvents(dial); // sometimes if multiple keys are pressed simultaneously, keyUp event doesn't fire so clean by timeout\n\n      setTimeout(this.dialFakeReset.bind(null, dial), 300);\n    };\n\n    this.handleKeyUp = e => {\n      this.dialFakeReset(e.key);\n    };\n\n    this.handleKeyDown = e => {\n      // handle edge-case when backspace is pressed right after ')' (which would delete that char, but not the digit before it)\n      if (e.key === 'Backspace' && e.target.value.charAt(e.target.selectionStart - 1) === ')') {\n        let _display = this.props.callDisplay;\n        _display = _display.substr(0, _display.length - 1);\n        this.props.setCallDisplay(_display);\n      }\n\n      if (e.ctrlKey || e.metaKey || e.altKey) return;\n      const allowedKeys = ['+', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#', 'Backspace', 'Enter'];\n\n      if (!allowedKeys.includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n      } else {\n        // reset display (e.g. after call is placed)\n        if (this.props.getCallNextKeyReset()) {\n          this.props.setCallDisplay('');\n          this.props.setCallNextKeyReset(false);\n        } // simulate events as if a real dial was pressed\n\n\n        this.dialFakePressed(e.key);\n      }\n    };\n\n    this.handleChange = e => {\n      this.updateDisplay(e.target.value);\n    };\n\n    this.formatNumber = number => {\n      this.asYouType.reset();\n      const result = this.asYouType.input(number);\n      return result === '' ? number : result;\n    };\n\n    this.updateDisplay = newValue => {\n      if (this.props.getCallTypingPN() === true) {\n        this.asYouType.reset();\n        const result = this.asYouType.input(newValue);\n\n        if (result !== '') {\n          this.props.setCallDisplay(result);\n        } else {\n          this.props.setCallDisplay(newValue);\n        }\n      } else {\n        this.props.setCallDisplay(newValue);\n      }\n    };\n\n    this.focusDisplay = () => {\n      if (this.numberInputRef.current) {\n        this.numberInputRef.current.focus();\n      }\n    };\n\n    this.bindListeners = () => {\n      if (this.props.client && !this.handlersSet) {\n        /*this.props.client.on('connect', (conn) => {\n          console.log('CC: CONNECT event fired');\n        });*/\n        this.props.client.on('disconnect', this.disconnectHandler); // if there's an active connection already in place\n        // (i.e. switching from SMS canvas after placing a call)\n\n        if (this.props.getCallConnection() && this.props.getCallConnection().status() !== 'closed') {\n          // re-set mute event listener\n          this.props.getCallConnection().on('mute', isMuted => {\n            this.setState({\n              isMuted\n            });\n          }); // and update mute button's state\n\n          this.setState({\n            isMuted: this.props.getCallConnection().isMuted()\n          }); // re-set elapsed time timer\n\n          this.timer = setTimeout(this.tick, 1000); // and update current elapsed time\n\n          const now = new Date();\n          this.setState({\n            elapsedTime: now - this.props.getCallStartTime()\n          });\n        }\n\n        this.handlersSet = true;\n      }\n    };\n\n    this.acceptIncomingCall = conn => {\n      if (conn) {\n        conn.accept();\n        this.updateDisplay(conn.parameters.From);\n        this.props.setCallTypingPN(false);\n        this.props.setCallNextKeyReset(true);\n        this.props.setCallStartTime(new Date());\n        this.timer = setTimeout(this.tick, 1000);\n        this.props.getCallConnection().on('mute', isMuted => {\n          this.setState({\n            isMuted\n          });\n        });\n      } else {\n        console.error('No incoming connection found');\n      }\n    };\n\n    this.rejectIncomingCall = conn => {\n      if (conn) {\n        conn.reject();\n      } else {\n        console.error('No incoming connection found');\n      }\n    };\n\n    this.asYouType = new AsYouType('US');\n    this.timer = null;\n    let dialActive = {};\n    ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#', 'Backspace', 'Enter'].forEach(key => {\n      dialActive[key] = false;\n    });\n    this.state = {\n      elapsedTime: null,\n      dialActive,\n      isMuted: false,\n      incomingRing: false,\n      incomingConnection: null\n    };\n    this.numberInputRef = React.createRef();\n\n    this.disconnectHandler = connection => {\n      console.log('CC: DISCONNECT event fired');\n      this.wrapupCall();\n    };\n\n    this.handlersSet = false;\n    this.theme = {\n      color: '#222222',\n      colorToggled: '#FFFFFF',\n      dial: '#E8E8E8',\n      dialActive: '#94979B',\n      dialToggled: '#6f7174',\n      dialGreen: '#36D576',\n      dialGreenActive: '#289f58',\n      dialRed: '#F22F46',\n      dialRedActive: '#B52334'\n    };\n  }\n\n  runPressEvents(digit) {\n    if (digit === 'Enter') {\n      this.connectCall();\n    } else if (digit === 'Backspace') {\n      return;\n    } else if (digit === 'Hangup') {\n      this.hangupCall();\n    } else if (digit === 'ToggleMute') {\n      this.toggleMute();\n    } else {\n      // send DTMF\n      if (this.props.client.activeConnection() && '0123456789#*'.includes(digit)) {\n        this.props.client.activeConnection().sendDigits(digit);\n      }\n    }\n  }\n  /**\n   * Outbound call\n   */\n\n\n  showTime(milis) {\n    const date = new Date(null);\n    date.setMilliseconds(milis);\n\n    if (milis) {\n      return (date.getUTCHours() > 0 ? date.getUTCHours() + ':' : '') + date.toISOString().substr(14, 5);\n    } else {\n      return '';\n    }\n  }\n\n  moveCaretToEnd(e) {\n    e.target.selectionStart = e.target.value.length;\n    e.target.selectionEnd = e.target.value.length;\n  }\n\n  componentWillUnmount() {\n    //this.props.client.removeAllListeners('incoming');\n    //this.props.client.removeAllListeners('connect');\n    //this.props.client.removeAllListeners('ready');\n    this.props.client.removeListener('disconnect', this.disconnectHandler);\n\n    if (this.props.getCallConnection()) {\n      this.props.getCallConnection().removeAllListeners('mute');\n    }\n\n    clearTimeout(this.timer);\n  }\n\n  componentDidMount() {\n    this.bindListeners();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.bindListeners();\n    /*if (\n      this.props.client &&\n      this.props.client.status() !== prevState.clientStatus\n    ) {\n      this.setState({ clientStatus: this.props.client.status() });\n    }*/\n\n    this.focusDisplay();\n  }\n\n  render() {\n    if (!this.props.client || this.props.client.status() === 'offline') {\n      return /*#__PURE__*/React.createElement(Canvas, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ModalMessage, {\n        msg: \"Voice client is offline\",\n        img: \"offline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.props.incomingCall !== null) {\n      return /*#__PURE__*/React.createElement(Canvas, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label1, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }\n      }, \"Incoming call from\"), /*#__PURE__*/React.createElement(Label2, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }\n      }, this.formatNumber(this.props.incomingCall.parameters.From)), /*#__PURE__*/React.createElement(IncomingDials, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(BtnDialRed, {\n        theme: this.theme,\n        key: \"RedDial\",\n        onClick: this.rejectIncomingCall.bind(null, this.props.incomingCall),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DialRed, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(BtnDialGreen, {\n        theme: this.theme,\n        key: \"GreenDial\",\n        onClick: this.acceptIncomingCall.bind(null, this.props.incomingCall),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DialGreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 15\n        }\n      }))));\n    } else {\n      return /*#__PURE__*/React.createElement(Canvas, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Display, {\n        value: this.props.callDisplay,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        onChange: this.handleChange,\n        onFocus: this.moveCaretToEnd,\n        onClick: this.moveCaretToEnd,\n        onBlur: this.focusDisplay,\n        ref: this.numberInputRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Timer, {\n        time: this.showTime(this.state.elapsedTime),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(CallDialpad, {\n        dialPressed: this.dialPressed,\n        dialActive: this.state.dialActive,\n        theme: this.theme,\n        callActive: this.props.client.activeConnection() !== undefined,\n        muted: this.state.isMuted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\nconst TimerDisplay = styled.div`\n  font-size: 4vmin;\n  height: 4vmin;\n  padding: 2vmin;\n  @media (min-width: 400px) {\n    font-size: 16px;\n    height: 16px;\n    padding: 8px;\n  }\n`;\n\nfunction Timer(props) {\n  return /*#__PURE__*/React.createElement(TimerDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 10\n    }\n  }, props.time);\n}\n\nconst Canvas = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: center;\n  height: 100vh;\n  max-width: 440px;\n  position: relative;\n  overflow-x: hidden;\n\n  padding-left: 12px;\n  padding-right: 12px;\n`;\nconst Display = styled.input`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 0.5vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 2px 12px 2px 12px;\n  }\n  border: 0;\n  background: #e8e8e8;\n  color: transparent;\n  text-shadow: 0 0 0 #222222;\n  &:focus {\n    outline: none;\n  }\n`;\nconst Label1 = styled.div`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 6vmin;\n  width: 66vmin;\n  font-size: 4vmin;\n  text-align: center;\n  padding: 20vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 24px;\n    width: 264px;\n    font-size: 16px;\n    padding: 80px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\nconst Label2 = styled.div`\n  outline: none;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 1vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 4px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\nconst IncomingDials = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  position: relative;\n  width: 80vmin;\n  margin-top: 83vmin;\n  justify-items: center;\n  @media (min-width: 400px) {\n    width: 320px;\n    margin-top: 332px;\n  }\n`;","map":{"version":3,"sources":["/root/twilio-phone-client/src/components/CallCanvas.js"],"names":["React","Component","update","styled","BtnDialRed","BtnDialGreen","DialRed","DialGreen","ModalMessage","AsYouType","CallDialpad","CanvasMsg","constructor","props","connectCall","client","status","console","error","log","callDisplay","setCallConnection","connect","number","getCallConnection","on","isMuted","setState","setCallTypingPN","setCallNextKeyReset","setCallStartTime","Date","timer","setTimeout","tick","now","elapsedTime","getCallStartTime","hangupCall","disconnectAll","wrapupCall","clearTimeout","removeAllListeners","toggleMute","mute","dialPressed","dial","_display","getCallNextKeyReset","match","setCallDisplay","updateDisplay","charAt","length","substr","numberInputRef","current","focus","runPressEvents","dialFakeReset","state","dialActive","undefined","$set","dialFakePressed","bind","handleKeyUp","e","key","handleKeyDown","target","value","selectionStart","ctrlKey","metaKey","altKey","allowedKeys","includes","preventDefault","stopPropagation","handleChange","formatNumber","asYouType","reset","result","input","newValue","getCallTypingPN","focusDisplay","bindListeners","handlersSet","disconnectHandler","acceptIncomingCall","conn","accept","parameters","From","rejectIncomingCall","reject","forEach","incomingRing","incomingConnection","createRef","connection","theme","color","colorToggled","dialToggled","dialGreen","dialGreenActive","dialRed","dialRedActive","digit","activeConnection","sendDigits","showTime","milis","date","setMilliseconds","getUTCHours","toISOString","moveCaretToEnd","selectionEnd","componentWillUnmount","removeListener","componentDidMount","componentDidUpdate","prevProps","prevState","render","incomingCall","TimerDisplay","div","Timer","time","Canvas","Display","Label1","Label2","IncomingDials"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport styled from 'styled-components';\nimport {\n  BtnDialRed,\n  BtnDialGreen,\n  DialRed,\n  DialGreen\n} from './CallDialpadComponents';\nimport { ModalMessage } from './CommonComponents';\n\nimport { AsYouType } from 'libphonenumber-js';\n\nimport CallDialpad from './CallDialpad';\n\nexport default class CanvasMsg extends Component {\n  constructor(props) {\n    super(props);\n    this.asYouType = new AsYouType('US');\n    this.timer = null;\n\n    let dialActive = {};\n    [\n      '0',\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      '*',\n      '#',\n      'Backspace',\n      'Enter'\n    ].forEach((key) => {\n      dialActive[key] = false;\n    });\n\n    this.state = {\n      elapsedTime: null,\n      dialActive,\n      isMuted: false,\n      incomingRing: false,\n      incomingConnection: null\n    };\n\n    this.numberInputRef = React.createRef();\n    this.disconnectHandler = (connection) => {\n      console.log('CC: DISCONNECT event fired');\n      this.wrapupCall();\n    };\n    this.handlersSet = false;\n\n    this.theme = {\n      color: '#222222',\n      colorToggled: '#FFFFFF',\n      dial: '#E8E8E8',\n      dialActive: '#94979B',\n      dialToggled: '#6f7174',\n      dialGreen: '#36D576',\n      dialGreenActive: '#289f58',\n      dialRed: '#F22F46',\n      dialRedActive: '#B52334'\n    };\n  }\n\n  runPressEvents(digit) {\n    if (digit === 'Enter') {\n      this.connectCall();\n    } else if (digit === 'Backspace') {\n      return;\n    } else if (digit === 'Hangup') {\n      this.hangupCall();\n    } else if (digit === 'ToggleMute') {\n      this.toggleMute();\n    } else {\n      // send DTMF\n      if (\n        this.props.client.activeConnection() &&\n        '0123456789#*'.includes(digit)\n      ) {\n        this.props.client.activeConnection().sendDigits(digit);\n      }\n    }\n  }\n\n  /**\n   * Outbound call\n   */\n  connectCall = () => {\n    if (this.props.client.status() !== 'ready') {\n      console.error('Client is not ready (' + this.props.client.status() + ')');\n      return;\n    }\n    console.log('Dialing', this.props.callDisplay);\n    this.props.setCallConnection(\n      this.props.client.connect({\n        number: this.props.callDisplay\n      })\n    );\n    this.props.getCallConnection().on('mute', (isMuted) => {\n      this.setState({ isMuted });\n    });\n    this.props.setCallTypingPN(false);\n    this.props.setCallNextKeyReset(true);\n    this.props.setCallStartTime(new Date());\n    this.timer = setTimeout(this.tick, 1000);\n  };\n\n  tick = () => {\n    const now = new Date();\n    this.setState({ elapsedTime: now - this.props.getCallStartTime() });\n    this.timer = setTimeout(this.tick, 1000 - (now % 1000));\n  };\n\n  showTime(milis) {\n    const date = new Date(null);\n    date.setMilliseconds(milis);\n    if (milis) {\n      return (\n        (date.getUTCHours() > 0 ? date.getUTCHours() + ':' : '') +\n        date.toISOString().substr(14, 5)\n      );\n    } else {\n      return '';\n    }\n  }\n\n  hangupCall = () => {\n    this.props.client.disconnectAll();\n  };\n\n  /**\n   * Cleanup after a call has ended\n   */\n  wrapupCall = () => {\n    clearTimeout(this.timer);\n    this.setState({ elapsedTime: null, isMuted: false });\n    // Destroy any pending connection listeners\n    if (this.props.getCallConnection()) {\n      this.props.getCallConnection().removeAllListeners('mute');\n    }\n  };\n\n  toggleMute = () => {\n    this.props\n      .getCallConnection()\n      .mute(!this.props.getCallConnection().isMuted());\n  };\n\n  dialPressed = (dial) => {\n    let _display = this.props.callDisplay;\n    // reset display (e.g. after call is placed)\n    if (this.props.getCallNextKeyReset() && dial.match(/^[0-9+#*]$/)) {\n      this.props.setCallDisplay('');\n      _display = '';\n      this.props.setCallNextKeyReset(false);\n    }\n    if (dial.match(/^[0-9#*]$/)) {\n      this.updateDisplay(_display + dial);\n    } else if (dial === 'Backspace') {\n      if (_display.charAt(_display.length - 1) === ')') {\n        this.updateDisplay(_display.substr(0, _display.length - 2));\n      } else {\n        this.updateDisplay(_display.substr(0, _display.length - 1));\n      }\n    } else if (dial === '+') {\n      if (_display === '') {\n        this.updateDisplay('+');\n      }\n    }\n    this.numberInputRef.current.focus();\n    this.runPressEvents(dial);\n  };\n\n  dialFakeReset = (dial) => {\n    if (this.state.dialActive[dial] !== undefined) {\n      this.setState({\n        dialActive: update(this.state.dialActive, { [dial]: { $set: false } })\n      });\n    }\n  };\n\n  dialFakePressed = (dial) => {\n    if (this.state.dialActive[dial] !== undefined) {\n      this.setState({\n        dialActive: update(this.state.dialActive, { [dial]: { $set: true } })\n      });\n    }\n    this.runPressEvents(dial);\n    // sometimes if multiple keys are pressed simultaneously, keyUp event doesn't fire so clean by timeout\n    setTimeout(this.dialFakeReset.bind(null, dial), 300);\n  };\n\n  handleKeyUp = (e) => {\n    this.dialFakeReset(e.key);\n  };\n\n  handleKeyDown = (e) => {\n    // handle edge-case when backspace is pressed right after ')' (which would delete that char, but not the digit before it)\n    if (\n      e.key === 'Backspace' &&\n      e.target.value.charAt(e.target.selectionStart - 1) === ')'\n    ) {\n      let _display = this.props.callDisplay;\n      _display = _display.substr(0, _display.length - 1);\n      this.props.setCallDisplay(_display);\n    }\n    if (e.ctrlKey || e.metaKey || e.altKey) return;\n    const allowedKeys = [\n      '+',\n      '0',\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      '*',\n      '#',\n      'Backspace',\n      'Enter'\n    ];\n    if (!allowedKeys.includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    } else {\n      // reset display (e.g. after call is placed)\n      if (this.props.getCallNextKeyReset()) {\n        this.props.setCallDisplay('');\n        this.props.setCallNextKeyReset(false);\n      }\n      // simulate events as if a real dial was pressed\n      this.dialFakePressed(e.key);\n    }\n  };\n\n  handleChange = (e) => {\n    this.updateDisplay(e.target.value);\n  };\n\n  moveCaretToEnd(e) {\n    e.target.selectionStart = e.target.value.length;\n    e.target.selectionEnd = e.target.value.length;\n  }\n\n  formatNumber = (number) => {\n    this.asYouType.reset();\n    const result = this.asYouType.input(number);\n    return result === '' ? number : result;\n  };\n\n  updateDisplay = (newValue) => {\n    if (this.props.getCallTypingPN() === true) {\n      this.asYouType.reset();\n      const result = this.asYouType.input(newValue);\n      if (result !== '') {\n        this.props.setCallDisplay(result);\n      } else {\n        this.props.setCallDisplay(newValue);\n      }\n    } else {\n      this.props.setCallDisplay(newValue);\n    }\n  };\n\n  focusDisplay = () => {\n    if (this.numberInputRef.current) {\n      this.numberInputRef.current.focus();\n    }\n  };\n\n  componentWillUnmount() {\n    //this.props.client.removeAllListeners('incoming');\n    //this.props.client.removeAllListeners('connect');\n    //this.props.client.removeAllListeners('ready');\n    this.props.client.removeListener('disconnect', this.disconnectHandler);\n    if (this.props.getCallConnection()) {\n      this.props.getCallConnection().removeAllListeners('mute');\n    }\n    clearTimeout(this.timer);\n  }\n\n  bindListeners = () => {\n    if (this.props.client && !this.handlersSet) {\n      /*this.props.client.on('connect', (conn) => {\n        console.log('CC: CONNECT event fired');\n      });*/\n\n      this.props.client.on('disconnect', this.disconnectHandler);\n\n      // if there's an active connection already in place\n      // (i.e. switching from SMS canvas after placing a call)\n      if (\n        this.props.getCallConnection() &&\n        this.props.getCallConnection().status() !== 'closed'\n      ) {\n        // re-set mute event listener\n        this.props.getCallConnection().on('mute', (isMuted) => {\n          this.setState({ isMuted });\n        });\n        // and update mute button's state\n        this.setState({ isMuted: this.props.getCallConnection().isMuted() });\n\n        // re-set elapsed time timer\n        this.timer = setTimeout(this.tick, 1000);\n        // and update current elapsed time\n        const now = new Date();\n        this.setState({ elapsedTime: now - this.props.getCallStartTime() });\n      }\n      this.handlersSet = true;\n    }\n  };\n\n  componentDidMount() {\n    this.bindListeners();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.bindListeners();\n    /*if (\n      this.props.client &&\n      this.props.client.status() !== prevState.clientStatus\n    ) {\n      this.setState({ clientStatus: this.props.client.status() });\n    }*/\n    this.focusDisplay();\n  }\n\n  acceptIncomingCall = (conn) => {\n    if (conn) {\n      conn.accept();\n      this.updateDisplay(conn.parameters.From);\n      this.props.setCallTypingPN(false);\n      this.props.setCallNextKeyReset(true);\n      this.props.setCallStartTime(new Date());\n      this.timer = setTimeout(this.tick, 1000);\n      this.props.getCallConnection().on('mute', (isMuted) => {\n        this.setState({ isMuted });\n      });\n    } else {\n      console.error('No incoming connection found');\n    }\n  };\n\n  rejectIncomingCall = (conn) => {\n    if (conn) {\n      conn.reject();\n    } else {\n      console.error('No incoming connection found');\n    }\n  };\n\n  render() {\n    if (!this.props.client || this.props.client.status() === 'offline') {\n      return (\n        <Canvas>\n          <ModalMessage\n            msg=\"Voice client is offline\"\n            img=\"offline\"\n          ></ModalMessage>\n        </Canvas>\n      );\n    } else if (this.props.incomingCall !== null) {\n      return (\n        <Canvas>\n          <Label1>Incoming call from</Label1>\n          <Label2>\n            {this.formatNumber(this.props.incomingCall.parameters.From)}\n          </Label2>\n          <IncomingDials>\n            <BtnDialRed\n              theme={this.theme}\n              key=\"RedDial\"\n              onClick={this.rejectIncomingCall.bind(\n                null,\n                this.props.incomingCall\n              )}\n            >\n              <DialRed></DialRed>\n            </BtnDialRed>\n            <BtnDialGreen\n              theme={this.theme}\n              key=\"GreenDial\"\n              onClick={this.acceptIncomingCall.bind(\n                null,\n                this.props.incomingCall\n              )}\n            >\n              <DialGreen></DialGreen>\n            </BtnDialGreen>\n          </IncomingDials>\n        </Canvas>\n      );\n    } else {\n      return (\n        <Canvas>\n          <Display\n            value={this.props.callDisplay}\n            onKeyDown={this.handleKeyDown}\n            onKeyUp={this.handleKeyUp}\n            onChange={this.handleChange}\n            onFocus={this.moveCaretToEnd}\n            onClick={this.moveCaretToEnd}\n            onBlur={this.focusDisplay}\n            ref={this.numberInputRef}\n          />\n          <Timer time={this.showTime(this.state.elapsedTime)} />\n          <CallDialpad\n            dialPressed={this.dialPressed}\n            dialActive={this.state.dialActive}\n            theme={this.theme}\n            callActive={this.props.client.activeConnection() !== undefined}\n            muted={this.state.isMuted}\n          />\n        </Canvas>\n      );\n    }\n  }\n}\n\nconst TimerDisplay = styled.div`\n  font-size: 4vmin;\n  height: 4vmin;\n  padding: 2vmin;\n  @media (min-width: 400px) {\n    font-size: 16px;\n    height: 16px;\n    padding: 8px;\n  }\n`;\n\nfunction Timer(props) {\n  return <TimerDisplay>{props.time}</TimerDisplay>;\n}\n\nconst Canvas = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: center;\n  height: 100vh;\n  max-width: 440px;\n  position: relative;\n  overflow-x: hidden;\n\n  padding-left: 12px;\n  padding-right: 12px;\n`;\n\nconst Display = styled.input`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 0.5vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 2px 12px 2px 12px;\n  }\n  border: 0;\n  background: #e8e8e8;\n  color: transparent;\n  text-shadow: 0 0 0 #222222;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Label1 = styled.div`\n  outline: none;\n  margin-top: 10vmin;\n  border-radius: 10px;\n  height: 6vmin;\n  width: 66vmin;\n  font-size: 4vmin;\n  text-align: center;\n  padding: 20vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    margin-top: 40px;\n    height: 24px;\n    width: 264px;\n    font-size: 16px;\n    padding: 80px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Label2 = styled.div`\n  outline: none;\n  height: 10vmin;\n  width: 66vmin;\n  font-size: 8vmin;\n  text-align: center;\n  padding: 1vmin 3vmin 0.5vmin 3vmin;\n  @media (min-width: 400px) {\n    height: 40px;\n    width: 264px;\n    font-size: 32px;\n    padding: 4px 12px 2px 12px;\n  }\n  border: 0;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst IncomingDials = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  position: relative;\n  width: 80vmin;\n  margin-top: 83vmin;\n  justify-items: center;\n  @media (min-width: 400px) {\n    width: 320px;\n    margin-top: 332px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}