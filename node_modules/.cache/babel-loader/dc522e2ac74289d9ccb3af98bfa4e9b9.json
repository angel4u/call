{"ast":null,"code":"\"use strict\";\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\n\nvar errors_1 = require(\"./errors\");\n/**\n * Valid deprecated regions.\n * @private\n */\n\n\nvar DeprecatedRegion;\n\n(function (DeprecatedRegion) {\n  DeprecatedRegion[\"Au\"] = \"au\";\n  DeprecatedRegion[\"Br\"] = \"br\";\n  DeprecatedRegion[\"Ie\"] = \"ie\";\n  DeprecatedRegion[\"Jp\"] = \"jp\";\n  DeprecatedRegion[\"Sg\"] = \"sg\";\n  DeprecatedRegion[\"UsOr\"] = \"us-or\";\n  DeprecatedRegion[\"UsVa\"] = \"us-va\";\n})(DeprecatedRegion = exports.DeprecatedRegion || (exports.DeprecatedRegion = {}));\n/**\n * Valid edges.\n * @private\n */\n\n\nvar Edge;\n\n(function (Edge) {\n  /**\n   * Public edges\n   */\n  Edge[\"Sydney\"] = \"sydney\";\n  Edge[\"SaoPaulo\"] = \"sao-paulo\";\n  Edge[\"Dublin\"] = \"dublin\";\n  Edge[\"Frankfurt\"] = \"frankfurt\";\n  Edge[\"Tokyo\"] = \"tokyo\";\n  Edge[\"Singapore\"] = \"singapore\";\n  Edge[\"Ashburn\"] = \"ashburn\";\n  Edge[\"Umatilla\"] = \"umatilla\";\n  Edge[\"Roaming\"] = \"roaming\";\n  /**\n   * Interconnect edges\n   */\n\n  Edge[\"AshburnIx\"] = \"ashburn-ix\";\n  Edge[\"SanJoseIx\"] = \"san-jose-ix\";\n  Edge[\"LondonIx\"] = \"london-ix\";\n  Edge[\"FrankfurtIx\"] = \"frankfurt-ix\";\n  Edge[\"SingaporeIx\"] = \"singapore-ix\";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\n\n\nvar Region;\n\n(function (Region) {\n  Region[\"Au1\"] = \"au1\";\n  Region[\"Br1\"] = \"br1\";\n  Region[\"De1\"] = \"de1\";\n  Region[\"De1Ix\"] = \"de1-ix\";\n  Region[\"Gll\"] = \"gll\";\n  Region[\"Ie1\"] = \"ie1\";\n  Region[\"Ie1Ix\"] = \"ie1-ix\";\n  Region[\"Ie1Tnx\"] = \"ie1-tnx\";\n  Region[\"Jp1\"] = \"jp1\";\n  Region[\"Sg1\"] = \"sg1\";\n  Region[\"Sg1Ix\"] = \"sg1-ix\";\n  Region[\"Sg1Tnx\"] = \"sg1-tnx\";\n  Region[\"Us1\"] = \"us1\";\n  Region[\"Us1Ix\"] = \"us1-ix\";\n  Region[\"Us1Tnx\"] = \"us1-tnx\";\n  Region[\"Us2\"] = \"us2\";\n  Region[\"Us2Ix\"] = \"us2-ix\";\n  Region[\"Us2Tnx\"] = \"us2-tnx\";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\n\n\nexports.deprecatedRegions = (_a = {}, _a[DeprecatedRegion.Au] = Region.Au1, _a[DeprecatedRegion.Br] = Region.Br1, _a[DeprecatedRegion.Ie] = Region.Ie1, _a[DeprecatedRegion.Jp] = Region.Jp1, _a[DeprecatedRegion.Sg] = Region.Sg1, _a[DeprecatedRegion.UsOr] = Region.Us1, _a[DeprecatedRegion.UsVa] = Region.Us1, _a);\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\n\nexports.regionShortcodes = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2\n};\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\n\nvar regionURIs = (_b = {}, _b[Region.Au1] = 'chunderw-vpc-gll-au1.twilio.com', _b[Region.Br1] = 'chunderw-vpc-gll-br1.twilio.com', _b[Region.De1] = 'chunderw-vpc-gll-de1.twilio.com', _b[Region.De1Ix] = 'chunderw-vpc-gll-de1-ix.twilio.com', _b[Region.Gll] = 'chunderw-vpc-gll.twilio.com', _b[Region.Ie1] = 'chunderw-vpc-gll-ie1.twilio.com', _b[Region.Ie1Ix] = 'chunderw-vpc-gll-ie1-ix.twilio.com', _b[Region.Ie1Tnx] = 'chunderw-vpc-gll-ie1-tnx.twilio.com', _b[Region.Jp1] = 'chunderw-vpc-gll-jp1.twilio.com', _b[Region.Sg1] = 'chunderw-vpc-gll-sg1.twilio.com', _b[Region.Sg1Ix] = 'chunderw-vpc-gll-sg1-ix.twilio.com', _b[Region.Sg1Tnx] = 'chunderw-vpc-gll-sg1-tnx.twilio.com', _b[Region.Us1] = 'chunderw-vpc-gll-us1.twilio.com', _b[Region.Us1Ix] = 'chunderw-vpc-gll-us1-ix.twilio.com', _b[Region.Us1Tnx] = 'chunderw-vpc-gll-us1-tnx.twilio.com', _b[Region.Us2] = 'chunderw-vpc-gll-us2.twilio.com', _b[Region.Us2Ix] = 'chunderw-vpc-gll-us2-ix.twilio.com', _b[Region.Us2Tnx] = 'chunderw-vpc-gll-us2-tnx.twilio.com', _b);\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.edgeToRegion = (_c = {}, _c[Edge.Sydney] = Region.Au1, _c[Edge.SaoPaulo] = Region.Br1, _c[Edge.Dublin] = Region.Ie1, _c[Edge.Frankfurt] = Region.De1, _c[Edge.Tokyo] = Region.Jp1, _c[Edge.Singapore] = Region.Sg1, _c[Edge.Ashburn] = Region.Us1, _c[Edge.Umatilla] = Region.Us2, _c[Edge.Roaming] = Region.Gll,\n/**\n * Interconnect edges\n */\n_c[Edge.AshburnIx] = Region.Us1Ix, _c[Edge.SanJoseIx] = Region.Us2Ix, _c[Edge.LondonIx] = Region.Ie1Ix, _c[Edge.FrankfurtIx] = Region.De1Ix, _c[Edge.SingaporeIx] = Region.Sg1Ix, _c);\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.regionToEdge = (_d = {}, _d[Region.Au1] = Edge.Sydney, _d[Region.Br1] = Edge.SaoPaulo, _d[Region.Ie1] = Edge.Dublin, _d[Region.De1] = Edge.Frankfurt, _d[Region.Jp1] = Edge.Tokyo, _d[Region.Sg1] = Edge.Singapore, _d[Region.Us1] = Edge.Ashburn, _d[Region.Us2] = Edge.Umatilla, _d[Region.Gll] = Edge.Roaming,\n/**\n * Interconnect edges\n */\n_d[Region.Us1Ix] = Edge.AshburnIx, _d[Region.Us2Ix] = Edge.SanJoseIx, _d[Region.Ie1Ix] = Edge.LondonIx, _d[Region.De1Ix] = Edge.FrankfurtIx, _d[Region.Sg1Ix] = Edge.SingaporeIx,\n/**\n * Tnx regions\n */\n_d[Region.Us1Tnx] = Edge.AshburnIx, _d[Region.Us2Tnx] = Edge.AshburnIx, _d[Region.Ie1Tnx] = Edge.LondonIx, _d[Region.Sg1Tnx] = Edge.SingaporeIx, _d);\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\n\nexports.defaultRegion = 'gll';\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\n\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\n\nexports.defaultChunderRegionURI = 'chunderw-vpc-gll.twilio.com';\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\n\nfunction createChunderRegionUri(region) {\n  return region === exports.defaultRegion ? exports.defaultChunderRegionURI : \"chunderw-vpc-gll-\" + region + \".twilio.com\";\n}\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\n\n\nfunction createChunderEdgeUri(edge) {\n  return \"voice-js.\" + edge + \".twilio.com\";\n}\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\n\n\nfunction getChunderURIs(edge, region, onDeprecated) {\n  if (!!region && typeof region !== 'string') {\n    throw new errors_1.InvalidArgumentError('If `region` is provided, it must be of type `string`.');\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new errors_1.InvalidArgumentError('If `edge` is provided, it must be of type `string` or an array of strings.');\n  }\n\n  var deprecatedMessages = [];\n  var uris;\n\n  if (region && edge) {\n    throw new errors_1.InvalidArgumentError('You cannot specify `region` when `edge` is specified in' + '`Twilio.Device.Options`.');\n  } else if (region) {\n    var chunderRegion = region;\n    deprecatedMessages.push('Regions are deprecated in favor of edges. Please see this page for ' + 'documentation: https://www.twilio.com/docs/voice/client/edges.');\n    var isDeprecatedRegion = Object.values(DeprecatedRegion).includes(chunderRegion);\n\n    if (isDeprecatedRegion) {\n      chunderRegion = exports.deprecatedRegions[chunderRegion];\n    }\n\n    var isKnownRegion = Object.values(Region).includes(chunderRegion);\n\n    if (isKnownRegion) {\n      var preferredEdge = exports.regionToEdge[chunderRegion];\n      deprecatedMessages.push(\"Region \\\"\" + chunderRegion + \"\\\" is deprecated, please use `edge` \" + (\"\\\"\" + preferredEdge + \"\\\".\"));\n    }\n\n    uris = [createChunderRegionUri(chunderRegion)];\n  } else if (edge) {\n    var edgeValues_1 = Object.values(Edge);\n    var edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map(function (param) {\n      return edgeValues_1.includes(param) ? createChunderRegionUri(exports.edgeToRegion[param]) : createChunderEdgeUri(param);\n    });\n  } else {\n    uris = [exports.defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(function () {\n      return onDeprecated(deprecatedMessages.join('\\n'));\n    });\n  }\n\n  return uris;\n}\n\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\n\nfunction getRegionShortcode(region) {\n  return exports.regionShortcodes[region] || null;\n}\n\nexports.getRegionShortcode = getRegionShortcode;","map":{"version":3,"sources":["../../lib/twilio/regions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nimport { InvalidArgumentError } from './errors';\n\n/**\n * Valid deprecated regions.\n * @private\n */\nexport enum DeprecatedRegion {\n  Au = 'au',\n  Br = 'br',\n  Ie = 'ie',\n  Jp = 'jp',\n  Sg = 'sg',\n  UsOr = 'us-or',\n  UsVa = 'us-va',\n}\n\n/**\n * Valid edges.\n * @private\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * All valid regions\n * @private\n */\nexport type ValidRegion = Region | DeprecatedRegion;\n\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\nexport const deprecatedRegions: Record<DeprecatedRegion, Region> = {\n  [DeprecatedRegion.Au]: Region.Au1,\n  [DeprecatedRegion.Br]: Region.Br1,\n  [DeprecatedRegion.Ie]: Region.Ie1,\n  [DeprecatedRegion.Jp]: Region.Jp1,\n  [DeprecatedRegion.Sg]: Region.Sg1,\n  [DeprecatedRegion.UsOr]: Region.Us1,\n  [DeprecatedRegion.UsVa]: Region.Us1,\n};\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\nconst regionURIs: Record<Region, string> = {\n  [Region.Au1]: 'chunderw-vpc-gll-au1.twilio.com',\n  [Region.Br1]: 'chunderw-vpc-gll-br1.twilio.com',\n  [Region.De1]: 'chunderw-vpc-gll-de1.twilio.com',\n  [Region.De1Ix]: 'chunderw-vpc-gll-de1-ix.twilio.com',\n  [Region.Gll]: 'chunderw-vpc-gll.twilio.com',\n  [Region.Ie1]: 'chunderw-vpc-gll-ie1.twilio.com',\n  [Region.Ie1Ix]: 'chunderw-vpc-gll-ie1-ix.twilio.com',\n  [Region.Ie1Tnx]: 'chunderw-vpc-gll-ie1-tnx.twilio.com',\n  [Region.Jp1]: 'chunderw-vpc-gll-jp1.twilio.com',\n  [Region.Sg1]: 'chunderw-vpc-gll-sg1.twilio.com',\n  [Region.Sg1Ix]: 'chunderw-vpc-gll-sg1-ix.twilio.com',\n  [Region.Sg1Tnx]: 'chunderw-vpc-gll-sg1-tnx.twilio.com',\n  [Region.Us1]: 'chunderw-vpc-gll-us1.twilio.com',\n  [Region.Us1Ix]: 'chunderw-vpc-gll-us1-ix.twilio.com',\n  [Region.Us1Tnx]: 'chunderw-vpc-gll-us1-tnx.twilio.com',\n  [Region.Us2]: 'chunderw-vpc-gll-us2.twilio.com',\n  [Region.Us2Ix]: 'chunderw-vpc-gll-us2-ix.twilio.com',\n  [Region.Us2Tnx]: 'chunderw-vpc-gll-us2-tnx.twilio.com',\n};\n\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const edgeToRegion: Record<Edge, Region> = {\n  [Edge.Sydney]: Region.Au1,\n  [Edge.SaoPaulo]: Region.Br1,\n  [Edge.Dublin]: Region.Ie1,\n  [Edge.Frankfurt]: Region.De1,\n  [Edge.Tokyo]: Region.Jp1,\n  [Edge.Singapore]: Region.Sg1,\n  [Edge.Ashburn]: Region.Us1,\n  [Edge.Umatilla]: Region.Us2,\n  [Edge.Roaming]: Region.Gll,\n  /**\n   * Interconnect edges\n   */\n  [Edge.AshburnIx]: Region.Us1Ix,\n  [Edge.SanJoseIx]: Region.Us2Ix,\n  [Edge.LondonIx]: Region.Ie1Ix,\n  [Edge.FrankfurtIx]: Region.De1Ix,\n  [Edge.SingaporeIx]: Region.Sg1Ix,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\nexport const defaultRegion: string = 'gll';\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\nexport const defaultChunderRegionURI: string = 'chunderw-vpc-gll.twilio.com';\n\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\nfunction createChunderRegionUri(region: string): string {\n  return region === defaultRegion\n    ? defaultChunderRegionURI\n    : `chunderw-vpc-gll-${region}.twilio.com`;\n}\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeUri(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(\n  edge: string[] | string | undefined,\n  region: string | undefined,\n  onDeprecated?: (message: string) => void,\n): string[] {\n  if (!!region && typeof region !== 'string') {\n    throw new InvalidArgumentError(\n      'If `region` is provided, it must be of type `string`.',\n    );\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  const deprecatedMessages: string[] = [];\n  let uris: string[];\n\n  if (region && edge) {\n    throw new InvalidArgumentError(\n      'You cannot specify `region` when `edge` is specified in' +\n      '`Twilio.Device.Options`.',\n    );\n  } else if (region) {\n    let chunderRegion = region;\n\n    deprecatedMessages.push(\n      'Regions are deprecated in favor of edges. Please see this page for ' +\n      'documentation: https://www.twilio.com/docs/voice/client/edges.',\n    );\n\n    const isDeprecatedRegion: boolean =\n      (Object.values(DeprecatedRegion) as string[]).includes(chunderRegion);\n    if (isDeprecatedRegion) {\n      chunderRegion = deprecatedRegions[chunderRegion as DeprecatedRegion];\n    }\n\n    const isKnownRegion: boolean =\n      (Object.values(Region) as string[]).includes(chunderRegion);\n    if (isKnownRegion) {\n      const preferredEdge = regionToEdge[chunderRegion as Region];\n      deprecatedMessages.push(\n        `Region \"${chunderRegion}\" is deprecated, please use \\`edge\\` ` +\n        `\"${preferredEdge}\".`,\n      );\n    }\n\n    uris = [createChunderRegionUri(chunderRegion)];\n  } else if (edge) {\n    const edgeValues = Object.values(Edge) as string[];\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n\n    uris = edgeParams.map((param: Edge) => edgeValues.includes(param)\n      ? createChunderRegionUri(edgeToRegion[param])\n      : createChunderEdgeUri(param));\n  } else {\n    uris = [defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(() => onDeprecated(deprecatedMessages.join('\\n')));\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}